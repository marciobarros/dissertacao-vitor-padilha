package test;

import static org.junit.Assert.assertEquals;

import org.junit.BeforeClass;
import org.junit.Test;

import br.uniriotec.vitor.padilha.dissertacao.MainProgram;
import br.uniriotec.vitor.padilha.dissertacao.calc.ClassicFunctionPointsCalculator;
import br.uniriotec.vitor.padilha.dissertacao.calc.FunctionPointsCalculator;
import br.uniriotec.vitor.padilha.dissertacao.calc.OptimizedFunctionPointsCalculator;
import br.uniriotec.vitor.padilha.dissertacao.model.SoftwareSystem;
import br.uniriotec.vitor.padilha.dissertacao.reader.FunctionsPointReader;

/**
 * Class that implements test cases for calculation of cost in function points - instance PARM
 * 
 * @author marciobarros
 */
public class TestCostParametros
{
	private static SoftwareSystem system;
	private static ClassicFunctionPointsCalculator classicCalculator;
	private static OptimizedFunctionPointsCalculator optimizedCalculator;

	@BeforeClass
	public static void setup() throws Exception
	{
		system = new FunctionsPointReader().execute(MainProgram.INSTANCE_DIRECTORY + "Parametros/functions-point.xml", MainProgram.INSTANCE_DIRECTORY + "Parametros/stakeholders-interest.xml");
		classicCalculator = new ClassicFunctionPointsCalculator(system);
		optimizedCalculator = new OptimizedFunctionPointsCalculator(system);
	}
	
	@Test
	public void testSolutionsFromDissertationClassic10p()
	{
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000010000000000000000000000000110100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000010100000000000000000000000000010100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000010001000000000000000000000000011100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000001010000000000000000000000000000110100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010110000000000000000000000000010100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000010100000000000000000000000000010100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000000000000010100000000000110001010000000000000000000000000000000]")));
		assertEquals(40, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000000000000010000000000000000001001000000000000000100000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000100000000000000000000000000011100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000000110000000000000000000000000111000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000000100000000000000000000000000111000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000100000000000000000000000000100100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000001110000000000000000000000000100000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000010100000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000000100000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000000000000110000000000000010010001000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000011011000000000000000000000000010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000111000000000000000000000001010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000010100000000000000000000000001010100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010101000000000000000000000001010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000000101000000000000000000000000000100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000100000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000100000000000000000000000001010100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000011110000000000000000000000000010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000110000000000000000000000000010100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100101000010110000000000000000000000000010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000011001000000000000000000000000010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000000100000000000000000000000000010100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000110000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000000110000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic20p()
	{
		assertEquals(86, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000000110000000000000000000000000110100000000000001010000000000000001000000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000001000101000000000000000000110100000000000000000000000000000001000100000000000000]")));
		assertEquals(86, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000001101000000000000000000000001010100000000000001001011000000000001000000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00010100001000011110000000000000000000000000110000000000000100000001000000000001000100000000000000]")));
		assertEquals(87, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101000000000101000000000000000000000000110000000000000001101110000000000000000000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000010101000000000000000000000000010000000000000001000100000000000000100100000000000000]")));
		assertEquals(86, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000010000000100100000000000000000110000000000000001000011000000000000000000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000010110000000000000000000000001111000000000000100100010000000000001000100000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000000001000000010000000000000000111000000000000111100001000000000000000000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000100000000000000000000000000011000000000000010100011000000000001000100000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000000111000000100000000000000000110000000000000000000000000000000001000100000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000000111000000100000000000000001110000000000000100100011000000000000000000000000000000]")));
		assertEquals(87, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000010111001000100000000000000001110100000000000000000000000000000100000000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000010011000000000000000000000000110100000000000000101001000000000001010000000000000000]")));
		assertEquals(86, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100101000010100000000000000000000000001111100000000000101000010000000000001000000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010100000000000000000000000001111000000000000101011000000000000001000100000000000000]")));
		assertEquals(86, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100100100000010101000000000000000000000000010000000000000000000000000000000101000100000000000000]")));
		assertEquals(86, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001110000000000000000000000001111000000000000001111010000000000001000000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000011010000000100000000000000001111100000000000000000000000000000001000100000000000000]")));
		assertEquals(86, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001101000000000000000000000000110000000000000011100001000000000001000000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000001101000001100000000000000000101100000000000000000000000000001000000100000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000010010001001000000000000000001111000000000000101010001000000000000000000000000000000]")));
		assertEquals(86, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000000101100000110000000000000000010000000000000000000000000000000001001000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000010100000000100000000000000001111000000000000000000000000000000000101100000000000000]")));
		assertEquals(86, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000010101000000000000000000000001110000000000000101011010000000000001000000000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000010001011000100000000000000000110100000000000000000000000000000000000100000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000010011110011000100000000000000001010000000000000000000000000000000000001000000000000000]")));
		assertEquals(86, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001001000101000000000000000000000000110000000000000101000000100000000001000000000000000000]")));
		assertEquals(87, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110000001000011100000001000000000000000001111000000000000000000000000000000010000100000000000000]")));
		assertEquals(88, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000010100000000000000000000000000010100000000000001111001000000000001001000000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic30p()
	{
		assertEquals(130, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000001111001001110000000000000000111000000000000101011010000000000011000100000000000000]")));
		assertEquals(130, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100100001000000111110100100000000000000000111100000000000101100010000000000011000100000000000000]")));
		assertEquals(131, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000000101110000101000000000000001111100000000000000010111000000000001001100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100000001011110001101100000000000000001110000000000000001100011100000000001000100000000000000]")));
		assertEquals(130, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000010101011100100000000000000000111100000000000101101010100000000001001100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100000000010101101000100000000000000000110100000000000001100111000000000001000100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000000111111011110000000000000000110000000000000001100101000000000011000100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011100101001010000000000000001110100000000000111010110000000000011000100000000000000]")));
		assertEquals(130, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100101000001100011101100000000000000000110000000000000111011001000000000011001100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000010101111100111000000000000000110000000000000101000010000000000101000000000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101101000000001001001100000000000000001110000000000000101010011000000000011001100000000000000]")));
		assertEquals(131, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000011101011010100000000000000001110000000000000001000011000000000001001100000000000000]")));
		assertEquals(130, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000011110001000101000000000000000111100000000000001110011000000000011001100000000000000]")));
		assertEquals(130, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000000110011001100000000000000000111100000000000110011110000000000001000100000000000000]")));
		assertEquals(131, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000001001000000111101001000000000000000000110100000000000011001110000000000001000100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100000000000100101101100000000000000001111100000000000011110010000000000001001100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101000000000010100111000110000000000000000111100000000000101111110000000000000001100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000000111101100010000000000000000110100000000000011001011000000000001001100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100100100000010101001101100000000000000000110100000000000101001010000000000011000100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100100001000001110011001101000000000000001110100000000000101110111000000000001000000000000000000]")));
		assertEquals(131, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000010110111001110000000000000001111100000000000100111111000000000011001100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010111101000110000000000000001110000000000000101001010000000000011100100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000010111001000100000000000000001110100000000000001111011000000000001000100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000000111010010110000000000000001111000000000000001111011000000000001001100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000011110001001010000000000000000110100000000000001000110000000000001000100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010100001101000000000000000001111000000000000100000010100000000101111100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100001000011111101101100000000000000000010000000000000111000010100000000011000100000000000000]")));
		assertEquals(131, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10010000000000000101011000110000000000000000111000000000000101101010000000000001000100000000000000]")));
		assertEquals(132, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000100000011101001100100000000000000001111100000000000001101111000000000001000100000000000000]")));
		assertEquals(130, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000011100001100110000000000000001110100000000000101110010000000000001000100000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic40p()
	{
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100111000000010111111000011000001000000100110100000000000001010011000000001111001100000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101000000011111011101111000000000000001111100000000000001000110000000001101110100000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100100001000010111011111110000000000000000110101000100000001001011000000000001001101000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000100000011101011010111000000000000001110100000000001001110010000000000101001100000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100101001000001101011110110000000000000001110100000000000001110010000000000111100100000000000000]")));
		assertEquals(174, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110000001000001111011011110000001000011101111100000000000101010010000000000001101100000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000001101000000101111001100000000000000000110100000000000001110110100000010101010100000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100100100000000111011001111000000000000000110100000000000001011010100000010111000100000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100100101000000101011101110000000000000001110100000000000111111111000000110101001100000000000000]")));
		assertEquals(174, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111100000000011111011100101000000000000000111100000000000101110010100000000111001101000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001111011101110000001000010100110100000000000001011011000000000111010100000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111000101000000101111010110000000000000001111100000000000011111011000000001101111100000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100100000000010101101000110000000000000001110100000000000110111111100000010101000111000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10010000001000011111111101110000000000000000111100000000010101110011000000000101111100000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001100001010101011000111000000000000000110100000000000001010011000000011111001100000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110000001001001111001010111000000000000000110100000000000111110010000000011101000100000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000001111001101110000000000000000111100000000000001011110000000010111011100000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100000000000111101100110000000000000000110100000000001001011011000000001111110100000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110000001000010100111101110000001000010100110100000000000001110011000000011101000100000000000000]")));
		assertEquals(172, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001101000011110111101110000000000000000110100000000000101110111000000011101000100000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001000000010101011001100000000000000001110100000000000001111010000000000101111101000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001001000010100111001111000001011000101111100000000000011011111000000000001000100000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101100000000001111111011111000000000000001110100000000000101010010000000000111010100000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101001000011101101001111000000000000001110100000000000101110111000000110101001100000000000000]")));
		assertEquals(174, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100000000000111011101110000000000000000110100000000001011110011100000000011010100000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101100000000101111001111000000000000000110100000000000011110011000000000101110100000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100001001000001101111001110000000000000000111100000000000011110010000000011001001100000000000000]")));
		assertEquals(173, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001000000011101011001111000000000000000111100000000000101110010000000101111000100000000000000]")));
		assertEquals(176, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101000000010101011011011000000000000000110100000000000011010010000000011101001100000000000000]")));
		assertEquals(175, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001101001010100011100110000000000000000111100000000000011110111000000110111001100000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic50p()
	{
		assertEquals(219, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000010101011110110000000011010000111100000011011001010011000000011101011100000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000010011111011001110000000011010100110100000000000011010011000000010111010101000000000000]")));
		assertEquals(219, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001100000010101111001110000000000010100111111000100000001110010000000001101010111000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100001000001111111101110000000000001101110100000011001101111110000000011101011100000000000000]")));
		assertEquals(218, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101001000001101111101110000000000000001110100000001011101010110000000110111011101000000000000]")));
		assertEquals(219, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100101000000111111000111000000000000001111101001000000001110110100000010111110101000000000000]")));
		assertEquals(219, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101100000010111011000110000000000000001010100000000000011010010011100011101111101000000000000]")));
		assertEquals(218, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001000000001101011001110000000000000000111101001100000001011010000000010111011101000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100000010011101011010110000000000010100111100000000000011011011100000011101111101000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100001000000101011111110000001000010100110100000100000011111110000000001111110111000000000000]")));
		assertEquals(219, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101101000001101011000111000000000000001111011010100000101010011000000110101010111000000000000]")));
		assertEquals(219, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101001000011111111011101000000000000000110101011100000101100110000000011101100111000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100011111000001101111111110000000000000000110101011000000111010110000000110111000101000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101100000001111111000111000000000000000111000000000000101111011011110011101100111000000000000]")));
		assertEquals(218, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000001000001111111100110000000000000001110101001100000111010010100000010111010101000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100000000001111011000111000001010010100111100000011011111010111000000010101000100000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101000001000011111011000110000000011001100111100000000000111010011000000111111111111000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000001000001111111000111000001000010101111101010100000101110011000000000101010101000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100000000001101111100100000000000000001111111000110011011110110000000010111000101000000000000]")));
		assertEquals(218, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101100000001111111011110000000000000001110111000000000111110010000000010101010111000000000000]")));
		assertEquals(218, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101000000001111011111111000001000010100111100000000000001011011000000010111011111000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101000000001111011001110000000010010101111100000000000101010011100000111101111101000000000000]")));
		assertEquals(219, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101101000011111011010110000001011011100111100000000000111011011100000011101011100000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001001000010111011101110000000010000101110100000000000111010111000000011101011100010000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101001000001111011100111000000000000100110100000000001011111011000000010111100100000000000000]")));
		assertEquals(219, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101000001000011111011000111000000000000001111100000001001001110111100000110111101111000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001110000001111111011110000000000000001110100000011111111110110000000010111111100000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001000000001101111111111000000010000101110100000000000011111111000000011111010100000000000000]")));
		assertEquals(220, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000001000001111011011111000000000000000110011000100000101111110000000011101110111000000000000]")));
		assertEquals(219, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001001000011101011001111000000000000001111100000011011011010011000000010101011110000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic60p()
	{
		assertEquals(263, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00111101000000011101111111110000000010011100110111100100000011011111100000011101011101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101101100000001111011101110000001011010101111111001110011101111111000000111111111111000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101000000001101011111110000001000010100110111010100001111010110100000111101111111000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101001000001111011010110000000011000101111101100010011011010110000000011101110111000000000000]")));
		assertEquals(263, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100000000011111111010111000001000010101111111011101001011111111000000110111110111000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101100000001111111000110000001011000101111101000100011111110110000000111101010111000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111101000000001111111101110000001011000101110101111100001101010011000000010101111101000000000000]")));
		assertEquals(262, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001000000001101011011111000000000000100110101010001011111011110000000011111111111000000000000]")));
		assertEquals(263, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001101000011101111110111000001000000101111101001101001001010010000000111111110101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110011001000011111011000111000001000010101111111011100001001110110100000010111110111000000000000]")));
		assertEquals(263, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001001000011111111111110000000000000001110101000010011001110111011100111111110101000000000000]")));
		assertEquals(263, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100001000001111111010111000000010010100110101010011011111111110000000011101011111000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001001000001111011010110000000000000000111101000000001101010010011111011111010101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001100000011111111001111000000011001100111111100000000011111010001100010111000111000000000000]")));
		assertEquals(263, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001100000011111111010111000001011010101111111011100000001110111000000010111010111010000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001000000011111011001111000000000011101110101010110001111010110000000010101010111000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101100000001111011110111000001000010101110101011100000111111111001110000111011111000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110111001000001101011000111000000000001000111101000110011111010110000000011101010101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100011101000001111011100110000000010000100111101001110001011011011000000011101010101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100101000000001101111001111000001000010101111111000110011101110111100000011111110101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100101000010011111011110111000001011000101111101000100000011010111000000111111110111000000000000]")));
		assertEquals(263, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110100001010011101111111111000000000000000110100000001111101010111101100111111111101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001001000001111111000110000000000010101110101001101101111111111000000010101111101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001100010011111111011111000001011000100110111000100000011010110100000010111011101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110111001000011111011001110000000000000100110111010101001111111110000000110111011111000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101001000001101111011110000000000000001110101010001011001010010011100010111010101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001101000001111011000111000001011000101110101010000111111110111000000010101111101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110001000000001101111100111000001000000100111101010110011111110110000000011101011101000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101100000001111011011110001000000011100111101001100000011010111000000111111011111000000000000]")));
		assertEquals(264, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001100000001111011000111000001000011101111101000110011011011110000000011111111111000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic70p()
	{
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001101000011101111010111000000011000101111101000111001011010110011111110101110111000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110111000000011111011010111000001011010101110111011101001101110111001111110111011101000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101001000001101111011111000000011000100110101001101011011010110011111110101010111000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00111001101000011101111010111000001010000101111111011101011111011010011101111111011111000000000000]")));
//		classicCalculator.report(FunctionPointsCalculator.fromString("[01110111101000011111011010111001010000000000110101010110001111010111011101110101110101000000000000]"));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110111101000011111011010111001010000000000110101010110001111010111011101110101110101000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101101000001111011011111101010011000100111111000100000011011111011111011101111111000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001001000001111011110111000000010010100111111001111001111111111001101011101110111000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001100000011101111011111000000011010101110101000101011101111111101111011111011111000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001001000001101111010111000001010010101111101011101001111011111001101110101110111000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101000000011101111110111000000011011101111111001111011011111011001111010111111111000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101100000001101011010111000000011001101111101001111001111011010001111011101111101000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001001000001101011110111001111010010100111101010100000011010110011101010101010101000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001101000001111011010111000001011000101111111101111011111011010011111010101111111000000000000]")));
		assertEquals(307, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001001010011111011111111101001011000101110111010100000011011010011111110111011101000000000000]")));
		assertEquals(311, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100111100000011111011000111101010000000001111111011100001011010011001111011111111101000000001100]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001100000001111011111111000000010010100111101000111011011111110011101011101111101000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101001000001111011111111000000010000100110101010101001111011110011101010101010111000000000000]")));
		assertEquals(307, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101101000011111111110111000001010010101110111010111011011110110101001011101111111000000000000]")));
		assertEquals(309, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110001001000001101111111111101001010010100110101001101001111010111000000010111110101000000001100]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101000000001101111011110101100000000100110111000111001101111010001111010101110101000000000000]")));
		assertEquals(307, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001000000001111011010111000000010001101111111000100001011111110011111011111110101000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001101000001111111111111000000010010100110111000101011111011111011101011101010111000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001001000001101111010111000001010010100110111010101001011010111011101111101010111000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001000010001101111010111000000011010100110101011111001001111010001101011111111101000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001000000011101111110111000001011000101110111010111001011010110011111010111111101000000000000]")));
		assertEquals(309, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110001101000001101011111111001110000000000111101011111101101011111011101111101111111000000000000]")));
		assertEquals(307, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101100000011111011111111000001010010100110111000100001111111111101101111101110101000000000000]")));
		assertEquals(309, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100001000011111011111110001010000000101110111011101001111011011011101010111011101000000000000]")));
		assertEquals(308, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110101100000011101011111111000001010010101110101000101001011011010011111011111110111000000000000]")));
		assertEquals(307, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100101001000001101111010111000001010010101110101001110111001010111011101010101010111000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic80p()
	{
		assertEquals(355, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001101011001101111111111001111011000100110101000100011111010111001111011111111101010000000100]")));
		assertEquals(354, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110011001011001101011111111001011010001100110111011111011111110110011111110101111101000000001100]")));
		assertEquals(354, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111001000000001111011111111101111010010100110111000111111011011111111101111101010101000000001100]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100111101010001111011111111001011011010100110111100111011011110110001101010111111101110000000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101101011011101111011111001010010000101110111100101011011111111101111011111110111001100000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110111100011001111111011111101111011010100110101100101011111010110001101010111011101001100000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100111101010011111011110111001110010000101111111011111001011011111111101010111011101010000000000]")));
		assertEquals(354, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110011101011001111111111111001011011000100111111011111011011110110101111011101010111000000001100]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110111000011001111011011111000001111010100110101100101111111011111111111011111011111011100000000]")));
		assertEquals(355, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100101100000011111011000111101011010010100110101111111001011110111011101010111011111010000001100]")));
		assertEquals(354, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100111000010011111111110111001010011000101111101001111001111010111011111010101010111000000000100]")));
		assertEquals(354, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00101001100010011111111110111001010010010101111101011111011111111110101101011101110111000000001100]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111001001011001101011010111001110010000100110111011111011011111111011101110101011111001100000000]")));
		assertEquals(355, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001101010001111011001111101010010000101111101010111001111111110001101110111111111010000001100]")));
		assertEquals(355, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110011000010011101111110111101011000010101111101001111011111011110001111110111010111010000001100]")));
		assertEquals(355, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100111100000011111011110111001011000000101110101110101011011010111011111010111010111001100001100]")));
		assertEquals(354, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110101101010011111111111111001110011010101110101110101001011010111001101111101111101000000000100]")));
		assertEquals(355, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110001101000001111011000111001110010011100111111001111001011010111001111011101110101001100001100]")));
		assertEquals(354, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100101101010001111111111111001110011001100111101001101001011011110001111010111010111000000000100]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001001010001111111110111101010010000100111101111101011111110110111111111101111111000100000000]")));
		assertEquals(355, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110111000000011111111101111101110010000100111101000111011011011111011111110111110101000100001100]")));
		assertEquals(354, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100111000000001101111110111001010010001100110111110111001111010111101111011101110101000000000100]")));
		assertEquals(355, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111011101000001101011010111001011010000100111101001110011011110111011111011111110101001100000100]")));
		assertEquals(354, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101100011001101111110111101110011001101111101001111111011110110011101010101111111000000001100]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110111100010011101111011111101010010000101111101000101001111111110101111010111011101000100000000]")));
		assertEquals(354, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110011001000011101111011111101110010001101110101100101011011011111111111011101110111000000000100]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100011001011001111011011111001010011000100111101011111001111010111101101110101011101010000000000]")));
		assertEquals(355, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00111101101000011111011111111101010000011100110111010101011011010111101101110111011111010000000100]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110111100000001111111110111101110010011101111101111111011111010111011101110101111111000100000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00111001000000001101011110111101111011001100110111010111101111110110101111110101110111000100000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic90p()
	{
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110011000010001111111110111101011010011101111111100101101011111110111101111101010111111100011100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011001011011101011010111101110010011100110101011111111111110110111101010111110101011100110100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101011001011011101011111111001110011010100111101111101101111110110101101010101111111011100010100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00111011101010001111011111111001010011001100111111111101111011011110101101111101010101110100010100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100111001010001111011011111001110010001101111111100101111011111110101101010111011101011100010100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101111101011001111011110111101011010001101110101110111101111011110101101011101111111010100110100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101111101011011101011111111001110010011101111111100111111111111110011111011111011101111100010100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101101000011001101011011111101010011011101110111101111101111010110101101110101010111110100011100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011101010011101111010111101110010011100111111000101101111010110111101010111010111110100010100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101101101010011101111111111001110010011101111111110101101011010111111111010101011111111100111100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011000010011111111110111101011010001101110111001101111111111110101111111101111101111100111100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111001000011001111111111111001111010001100111111101101101111010110111101110111010111111100110100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101011101010011111111011111001111010001100111101100111111111110110101101110111110101110100011100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110111101011001111111010111101111010011101110111111111111011110111101101110101011111110100011100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011000011001101111011111101110010011100111101110101111011111110001101110101111101111100011100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101111101010001101011011111101110011010101110111111111111011010111101111110111111111010100010100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110111000010011101111010111101011011001101110111100111111111111111101111110101110111110100010100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111100010001111111111111101110010001101110101101111011111111111101111010111011101111100011100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101111000010001111111111111101010011001101111101111101111011110110011101011111111111110100011100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101011100010001101011110111001010010001101110101100101101011111111001111110111110111011100110100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111101011011101111111111001111011011100110101011101101111011110111111011101111111010100111100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111101010011101111111111101110010010101110111101101111111011111101101110101011101111100110100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111000010011101111011111101111011011101111101100101111011010110001111110101010101010100011100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111001010011101111110111101111011000101111101101111101011011111101111010101011101111100010100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101111000011011101111011111001110010001100111111110111001111110110101101011101011111011100111100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110111101010011101011010111001011010011101111101111101111011011111111111110111011111010100110100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101011101011011101111010111101111011011100110111110111101111110111111111110101011111010100110100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011001011001101011010111101110010000100111111111101111111011110111111011101010111110100010100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111100010011111111111111101111011011101110101000101111011111111111101111101010111111100011100]")));
		assertEquals(401, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111001010011111011110111001111010010100111111101101101111111110101101110101011111010100110100]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized10p()
	{
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000010110000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001001010000000000000000000000000000110100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000110000000000000000000000001110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000000101000000000000000000000000010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000001000000000000000000000000010100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001100000000000000000000000000010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000011010000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000000000000010000000000000001001110000000000000000000000000000000]")));
		assertEquals(43, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000000000000011000000000000100000001000000000001000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000000101000000000000000000000001101000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000110000000000000000000000000100100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000010100000000000000000000000000010100000000000000000000000000000000000000000000000000]")));
		assertEquals(43, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000000000000010000000000000100000001000000000000000100000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000100000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000010010000000000000000000000000110100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000110000000000000000000000000111000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000000000000010000000000000001111010000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000011000000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010100000000000000000000000000011100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000000110000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000011001000000000000000000000001010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000001000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000000101000000000000000000000001011000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000010101000000000000000000000000010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000100000000000000000000000000010100000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000010110000000000000000000000001110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000000011000000000000000000000000110000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000001100000000000000000000000000010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000001100000000000000000000000000010000000000000000000000000000000000000000000000000000]")));
		assertEquals(44, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00010000001000011000000000000000000000000000010000000000000000000000000000000000000000000000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized20p()
	{
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011000111101100000000000000001110100000000000000000000000000000000000100000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000110000001110000000000000000110000000000000101000000000000000000000000000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000010110001000101000000000000001110100000000000000000000000000000000000100000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000010101000000100000000000000000111000000000000001100001000000000000000000000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110000001000010111010000100000000000000001111100000000000000000000000000000000000000000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000011100000000100000000000000001010000000000000100100110000000000000000000000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000101000000000000000000000000110000000000000101010010000000000000000100000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000110100001010000000000000000010000000000000101110011000000000000000000000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000010101000000100000000000000000110000000000000101100001000000000000000000000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000010101001000101000000000000001111000000000000000000000000000000001000000000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000001101000000000000000000000001110000000000000101101010000000000011000000000000000000]")));
		assertEquals(87, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000010101000001000000000000000001111000000000000110000010000000000000000000000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100100001000011000000000000000000000000000110000000000000101100010000000000001000000000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000000110000101000000000000000000010100000000000001010001000000000000000000000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001001001110010001100000000000000001111000000000000000000000000000000001000000000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000011111000000000000000000000000110100000000000101001011000000000000100000000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10010100001000001100000000000000000000000000010100000000000101000010000000000000000100000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000011100000000000000000000000000111100000000000000010010000000000000000100000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000000010000000010000000000000000111000000000000100011111000000000000000000000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000010110000101010000000000000000110000000000000000000000000000000010000100000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000100110001000000000000000000110000000000000001000000000000000000000000000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000000111000000000000000000000000110100000000000001000101000000000001000000000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000000101000000000000000000000001111000000000000001001000000000000001000100000000000000]")));
		assertEquals(87, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100101000011101000000000000000000000000110000000000000101111100000000000000000000000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010100000000000000000000000000110000000000000101001011000000001001000000000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000000101000000100000000000000000011000000000000001000010000000000000000000000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000011011000000000000000000000000110100000000000100111010000000000000001100000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000000100001001000000000000000001010000000000000000010100000000000000000000000000000000]")));
		assertEquals(88, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000000000001001000000000000000001110100000000000001100011000000000000000000000000000000]")));
		assertEquals(86, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000001000000100000000000000000000000001111000000000000101010010100000000001000000000000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized30p()
	{
		assertEquals(130, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100001000000100001101110000000000000001111100000000000001001011000000000001000100000000000000]")));
		assertEquals(131, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011101111101110000000000000000111000000000000101011001000000000001000100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000011101101101101000000000000000111000000000000101101000000000000001000101000000000000]")));
		assertEquals(131, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000000100011001110000000000000000110100000000000101010011000000000001000100000000000000]")));
		assertEquals(130, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000000110011101111000000000000001111100000000000011111111000000000000000100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000001000011111000101100000000000000000110100000000000001000111000000001100001100000000000000]")));
		assertEquals(131, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001100011100110000000000000001111100000000000101000010000000000011000100000000000000]")));
		assertEquals(131, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000000100101000111000000000000000110100000000000101000111000000000101000000000000000000]")));
		assertEquals(130, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010111101100110000000000000000111000000000000011110010000000000001000100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100000000011111001000111000000000000001110100000000000111001010000000000000000100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000001000011111001000100000000000000000110100000000000101100100000000000001000011000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110000001000000101101101100000000000000000110100000000000111000001100000000001000100000000000000]")));
		assertEquals(131, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100100000000010111011000100000000000000000110100000000000111110110000000000001000000000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000100000010111011001000000000000000000110000000000000101010010000000000001000100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001110111011110000000000000001110000000000000001000010000000000001001100000000000000]")));
		assertEquals(131, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000101011000110000000000000000111100000000000101000011000000000011001100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100000000001100001111000000000000000001111100000000000101011010000000000001000100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000001000011111001101100000000000000000110100000000000001001011000000000001001100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110000000000011101001100010000000000000001111000000000000101011011000000000001000100000000000000]")));
		assertEquals(131, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000001000010100111101110000000000000000110100000000000111100011000000000011010000000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101000000000010100101001010000000000000000110100000000000101010011000000000001000100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110000001000011111011000110000000000000001111100000000000001001110000000000000000100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000001000001111111101101000000000000000110100000000000111101010000000000011000000000000000000]")));
		assertEquals(130, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100000000011110101000110000000000000001111000000000000001000010000000000001000100000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100100001000000100011000110000000000000001110100000000000011010111000000000001000000000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000011101001000110000000000000000110000000000000100100010000000000001100100000000000000]")));
		assertEquals(131, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000101000011110101000111000000000000001110000000000000001101010000000000001000100000000000000]")));
		assertEquals(131, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100000000000111000100010000000000000000110100000000000101101010000000000111000100000000000000]")));
		assertEquals(131, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100000000011100111000110000000000000001111000000000000101010110000000000001001000000000000000]")));
		assertEquals(132, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10010001000000001101101101100000000000000000111000000000000101100011000000000011000100000000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized40p()
	{
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000100000000101111111100000000000000001111100000000000101110010000000001111010111000000000000]")));
		assertEquals(175, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001001000001111111101110000000000000001111100000000000101110011100000010111000100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100100000000001111001101011000000000000000110100000000000001010011100000111111100100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110100001000001111101110110000001000000100110100000000000101011111000000000111001100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000100000011111011010110000000000000000111100000000000111010011000000010111000100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101101010001101101000110000000000000000111100000000000111010011000000001111110100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101100000010101011100110000000000000001111100000000000101100011000000000111010111000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110000001000000110011100110000000000000001111100000000000011110110000000000111010101000000000000]")));
		assertEquals(174, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001000000001101111011010000000000000000111100000000000001110111000000000111001111000000000000]")));
		assertEquals(175, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110100001000001110111111110000000000000001111100000000000010011011000000011111101100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110000000000011101011001110000000000000001110000000000000111110110000000000111010110000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000001000011111111001110000000000000001110011000000000001011010000000000001101101000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110000001000000111111001110000000000000000110100000000000111010010000000001111110101000000000000]")));
		assertEquals(175, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110000101000010101011110101000000000000001111100000000000011111011000000000111001101000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100101000010101011010110000000000000000110100000000000111100110100000011101000100000000000000]")));
		assertEquals(174, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00101001100000001111101100111000000000000000110100000000000111000010000000000011010111000000000000]")));
		assertEquals(175, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000000111011010110000000000000000110100000000000111001010000000011101100100000000000000]")));
		assertEquals(173, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00111011000000011111011101111000000000000001111100000000000001011010100000000111001100000000000000]")));
		assertEquals(175, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000001000001111111011101000000000000000110100000000000111011111000000000011010101000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001000000001111101110111000000000000001111100000000000001111011000000111111001100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001101001011111111100111000000000000000111000000000000011100011000000011111000100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00111000000000001111111110001000000000010101111100000000000001110111000000000111001100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000100001000001100011101110000001000000101110100000000000001110110000000010111001100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101001000011101101000110000000000000000111100000000000001100000100000010101001101000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000001000011111001100110000000000000001110100000000000111010010000000011101001111000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110000000001010101011011110000000000000001110100000000000111010110000000010111001100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000100001000011101111001100000000000000000111100000010101001010010000000010111000100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000001000000101111001110000000000000000111100000000000011111110000000001101011100001000000000]")));
		assertEquals(175, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101100000000101111110110000000000000000110100000000000111011011000000000101111100000000000000]")));
		assertEquals(176, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000001000011101011000111000000000000001111100000000000011111011100000111111001100000000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized50p()
	{
		assertEquals(218, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110000001000011101011111111001000000000001111100000001001111111011000000010101000100000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100100001000011111011100110000001000010100111101000100000111011010000000010101001111000000000000]")));
		assertEquals(218, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110000001000001111011000111000000000000000110101100000000011010011100000110101110101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101100000011101111100110000001000010100110100000001011001110011000000010101110100000000000000]")));
		assertEquals(219, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001100000001111111000111000000000000001111111010100000001010010000000010101101101000000000000]")));
		assertEquals(218, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110101101000001111011100110000000000000001111100000001001101011111000000110101100101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001001000011100011100110000000000000101111100000001011101011110000000011101110100000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100000000001111111101110000001000010101111100000011001011010111000000111111010100000000000000]")));
		assertEquals(219, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110100000000001101011000110000001000001100110100000000001011011110000000111111001111000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101000000001111001001111000000000000000111101000000000111011110100000111111011111000000000000]")));
		assertEquals(219, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101000000001111011100111000000000000001110100000001011001110010000000010111110101000000000000]")));
		assertEquals(219, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001000000001111111001100000000010000100111100000000000011010110000000010111111101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101101000001111011001110000001010001100110100000000000101101111000000111101011111000000000000]")));
		assertEquals(218, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001000000010111011100110000000000000001110100000011011111111111000000011111111101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000001000010101111100111000000000000000111101000010001011111111100000001101011111000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101100000001111011110111000000010011101110100000000000111110011000000110101001101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110111000011001111111101110000000000000001111101000000000111010010000000010101100101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100100001000010101111111110000000000010001111100000000000101011010001101011101100100000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101100001001101011000100000000000000000110100000001011011011111000000110111110101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100001000000011111111011110000001000010100110100000000000111111010000000010101010101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110111101000011101101000110000000000000001111111000100000011011011000000010101110111000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110001101000010111111011110000001000010100111111010000000101010011000000011111000101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001101000010101111100110000001000011101111100000011001011000011000000110101110100000000000000]")));
		assertEquals(219, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100100000000010111111000110000000000000000110101000010011011000011000000010101011111000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110110000000010111011010110000000000000100110100000010011111010011000000011101010100000000000000]")));
		assertEquals(221, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001000000011101111011111001110000000000110100000000001001110011100000010111001100000000000000]")));
		assertEquals(218, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110000001000011111111000110000000000000001111101010100000011010110000000010101111101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101001000001111011101110000000010000101110100000000000011111010000000010101011101000000000000]")));
		assertEquals(219, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001001000011111011100111000000000010100111101000000000111111011000000000101101101000000000000]")));
		assertEquals(220, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00111111000000011101111001110000000000000000111101000000000101110110000000010101110101000000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized60p()
	{
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001001000010111111111110000001000010100111100000001001111111010001111010101100101000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101001000000111111111111000001000000101110111000000000101110111001101110101100111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001100000001101011101111001101000010100110111110100000011010110000000110111111101000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101001000011101011010110000000000010101110111000100111001010110100000010111111111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001000000011101011000111000001000010100110111100110001011110111000000111111010111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001100000001111111010111000000000000000110111011100000101010111101101011111110101000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101101000001111111010111000000000000000111101001100000011010110011101011101110101000000000000]")));
		assertEquals(263, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001001000001111011010111001000000000001110101010001001111011111000000111111110101000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101100000001101011101111000001000011100110101000100000011111011001101000101111111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001000011001111111111111000001011000101110111010100000011110111100000011101111111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101001000011101111000111000000000010100110111100100011111111110000000110101110111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001001000001101111100110000001000011100110101000101001011111111000000110111011101000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000001000001101111111110000001000000100111101011000000101110110011101010111111111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100011001000011111011000111000001000010101111111101110011111010010000000111111010111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100011101000001101011011110000001010010100110111000000001111110110000000010101111111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101001000000001111011111110000000000000100111101011110011011110110000000110111010101000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101000000001111011010110000001000000101111101010011101111110111100000011111110111000000000000]")));
		assertEquals(266, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101100000001111111110111000000000000000111101000111011011111110000000110111110111000000001100]")));
		assertEquals(263, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101101000001101011111111000001010010100111101001100000101010110000000110111010111110000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110101100000001101011000110000001000000100110111011101011011110111000000010111110111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101100000011101111110111000001010001100111111100100000111111111100000111111011111000000000000]")));
		assertEquals(263, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101001000011101011111111000001010010101111100000000000111111111011111111111011111000000000000]")));
		assertEquals(263, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100001001000001111111011110000001010011100111111101100000011010110100000010111011101000000000000]")));
		assertEquals(263, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001001000011101011000110000000000000000110111010010001001110110001111010111110101000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110101101000011111011110111000001011011100111101011100000111010111100000111101010111000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001000000011111111010110000001000000100111101111100001111010110000000011111111101000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100100001000011101011100111000000010010101111101000000000111100011011101110111010101000000000000]")));
		assertEquals(264, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101100000011111011001110000000010000100111111011100001111111110000000111111010111000000000000]")));
		assertEquals(266, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001101000011111111111111000000000000001111111001101001111011111000000110101011101000000001100]")));
		assertEquals(263, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001000000011111011011111001000000000001110101000001011111011110000000011101011101000000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized70p()
	{
		assertEquals(307, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100011101000001111011110111000000000000100111111001101011111111110001101111111110101000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101000000011111011110111000000010000101110101000101011011010111001111111101011101000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101001000001101111010111000001011000101111101110101011001011110011111110101111101000000000000]")));
		assertEquals(309, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100011000000011101011110111000001011011101111101000101011111110111000000010101110111000100001100]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101000000011101111010111000000011010101110111010101011111011111001101110111010111000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101101000011111111010111000001010010100111101010101111001110110011111011111110111000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101100000011101111011111000000010000100110111011111001011111110001111110101111101000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001101000001111011010111000000011010100111101000101001011111110001111010111111101000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00101001100000001101111010111000000011010100111101000111011011010010011101011111110111000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101101000001101111010111001011010010101110101011100000011011110011101011101010111000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001001000011101011011111000001010001100110101000111001101111110001101110111011101000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001101000001111111111111000000011010100111111000111001011011111011111011111111101000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001001000001111111010111001110011000100110111011101001011110110000000011101111111010000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101000000001111111111111000000010010101110111001101011011011111011101010111011111000000000000]")));
		assertEquals(307, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101000000011111111110111001000010000100111111000100000111110111101101111101011111000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001101000001101011011111000000011010101110101011111011011010111001111010101110111000000000000]")));
		assertEquals(309, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001100000001111011110111001101011010100111111111111011011110111000000011101111101000000000100]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001101000011101111010111000000010000101110111001111001111010111001111011101010101000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101100000011111111011111000001010010100111111011101101001011111001111011111011101000000000000]")));
		assertEquals(309, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00101001000010011111111111111001110000000101111111001110001111010111100000111101011111010000000000]")));
		assertEquals(309, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110001101000011101111011111101111011001101111101001101111011011110100000011111110111000000000000]")));
		assertEquals(309, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110101101000011101011110111101010000000001110111001111001011011111101101110111011111000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111001101000011111011110111000001010010100110111000101001111010010011111111111011111000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100011000000011111111110111000001010010100110101001111011111110011011101011111110101000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001101000001101011011111001111010010101111111001100000011010111001101111101010111000000000000]")));
		assertEquals(307, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00101001001000011101111111111000001000000100110111001111001111011110101101110111010111000000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00111001000000011111111110111101010000000001111111000100011011010110101101110111010101000000000000]")));
		assertEquals(310, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100101000000011111011010111101110011010101111111011111011111111110000000011101011111000000001100]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110001000000011101111000111000000010010100110101100100011101110110001101010111110111001000000000]")));
		assertEquals(308, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101101101010011101111110111000001010010100110101011100001011011111001000010111010101000000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized80p()
	{
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101100011011101011010111101010000000100111111000101011111010111111111011111011101110000001100]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111011101000011101011011111001110000010101110101000101001011111111001111011111110111110000000100]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100101101000001101011011110001010011000100110101001101101011111110001101011111110101110000000100]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101001010001111011011111101010010010101111111000100001111011110001101010101011101000100000100]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001000000011101011110111001110011010101111111101110001011110110111101010111010111010000001100]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00101111100000011111011000111101010011010100110101011111011011010111001101110101111111110000000100]")));
		assertEquals(352, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101101011011111011011111101010011010101111101110101001011010110111111111111111101000100000000]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100101000010011101111001111001110010000100111111011111001111110111001101010101110111001100000100]")));
		assertEquals(352, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110111000011001111111110111101010011010101111101001101001111111110111101011111110111110000000000]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00111011101000011101011110110101011011010100111111001111011011011111011101110101010101001100000100]")));
		assertEquals(352, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110111101010001101011010111001110011011101111111001111001111011111001101111101110111110000000000]")));
		assertEquals(353, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110011000000001101111110110001111011001100111111010101001111010111011111111101011101110100000000]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100001101000011101011011110101010010000100111101010111011011111111111101010111111101000100001100]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110101001000001111111000111101011010001101110111000101111111111110011101011101010111000100001100]")));
		assertEquals(352, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101101001011011111011010111001010011010101111111000101101011110111011101111111011101000100000000]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100101100010011111011010111101111000000100111101010101001111110111011101010101010111110000000100]")));
		assertEquals(354, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001001011011111011110111001110010010100111101100111111111010111001111111101110101000000001100]")));
		assertEquals(353, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110111101000001101111110110001111011001101111101001101001011010111001101110111110111110100000000]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100001101000011101011110110101111011000101110111001111101011010110101111110101110111010000000100]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110101001000011101111110110101111010010101111111000101111111110111011101010101010101000100000100]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100101100000001111111111111101010000001100110101010101001011111110111101110101011111000100001100]")));
		assertEquals(353, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111011101000011111111001111001111011000101110101011101001011011110001111010111111111010100000000]")));
		assertEquals(354, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00110001001010001101111011111101010011000101110111101101011111110110111111111111111101000000001100]")));
		assertEquals(354, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100101000010011101011111111001110011000101110111010111011111010111111101111101110101000000001100]")));
		assertEquals(352, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111111101011001111111111111001110011010100110101011111001011110110001111011111110101001100000000]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110001001000011111111110110001110011010101110101001111001111010110101111110101110111010000000100]")));
		assertEquals(352, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100001001000001111011011111001010011001101110111101101101011111111111101011111011101010000000000]")));
		assertEquals(352, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100001001011011101111010111101111010010100111101011111011011111111111101011101110101000100000000]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101001000000001111111010111001110010000100110111010110011011110111001101010101010101001100000100]")));
		assertEquals(355, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111001101000011111011101111001010010000101111111010111011011110110011111010101111111000100000100]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized90p()
	{
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111011101011011101011010111001110011011100111111100101011111110110101111010111111101110100111100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111100011011101011111111001110011000101111101111101101011010110101111011111111111010100111100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111001011001111111111111001110011001101110111010101111111110110111101110111110101011100111100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111000010001111111010111001110010011100110111011111111011010110111101010111011101010100010100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011000010001111011111111001111010011100110111100111101111011111001101110101011101010100011100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011101011001111011011111101111010011100110101010101111011010110111111110101010101010100110100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101111100010001111111110111101010010011101111111101111011011011110111111111101110111010100010100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100111001010001101011110111101011011011101110111111111111011011111111111111101111101010100011100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011001011011111111111111001110010001101110101100111101011011111011101111111011101011100010100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101111100011001111011010111001111011011100110111111101111011111110101111110111111111110100010100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111000011011101111111111001110011000101110111110101111011111111111101010101110101111100111100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111100010001101011110111101011010001100111111010101101011010111111111010101111111111100111100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111001001011001101111011111101011011011100111101110101111111110111111101011101111101011100010100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101111100010001111011111111001111010001100110111100101101111011111001111011101110111110100011100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100111100010001111111110111001011011011101111101111101101011011110101111010101111111111100010100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100011101011011101011111111001110011011101110111101111111111011110101111011101010111010100010100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101111000010011111111111111001110011010101111111110111111011111110111101111111111111010100010100]")));
		assertEquals(398, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011101011011101011111111101010011011100111111111101011111111111011111111101110101010100110100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111011101010011111111111111001011010001101111101110111111011011111111111011101111101111100001111]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111100011001111011111111101010011001101111101100111001111010110101101011111011111011100111100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011000011001101011110111101111011010100111101101111111011110110101101111111011111010100110100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111001011011101011111111101111011001101111111001101111011110110111101111111111111110100011100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011100011011101011110111101111010011100111111011101111011111111101101111101011111110100010100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101111000011011111111111111101011011001101111101111101101011011111101101111111110111010100110100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011101010001101111110111001110011010101111111100101111111111110101101110101110111011100111100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111000011011111011111111001111011011100110111011101101011010111111111011101110111111100010100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110111100011011101011111111001110011011101111101101111101111110110111111110101011111010100011100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011100010011111111010111001110011011100111111100101111111111111011111110101010111111100110100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101011100011011111111110111101011011011100111101111111111111010111111101111101111101011100010100]")));
		assertEquals(401, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101011001010011111111011111001111011001100111101011111111111111111111111010111110111111100010100]")));
	}
}