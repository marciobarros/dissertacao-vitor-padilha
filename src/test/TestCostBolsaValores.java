package test;

import static org.junit.Assert.assertEquals;

import org.junit.BeforeClass;
import org.junit.Test;

import br.uniriotec.vitor.padilha.dissertacao.MainProgram;
import br.uniriotec.vitor.padilha.dissertacao.calc.ClassicFunctionPointsCalculator;
import br.uniriotec.vitor.padilha.dissertacao.calc.FunctionPointsCalculator;
import br.uniriotec.vitor.padilha.dissertacao.calc.OptimizedFunctionPointsCalculator;
import br.uniriotec.vitor.padilha.dissertacao.model.SoftwareSystem;
import br.uniriotec.vitor.padilha.dissertacao.reader.FunctionsPointReader;

/**
 * Class that implements test cases for calculation of cost in function points - instance PARM
 * 
 * @author marciobarros
 */
public class TestCostBolsaValores
{
	private static SoftwareSystem system;
	private static ClassicFunctionPointsCalculator classicCalculator;
	private static OptimizedFunctionPointsCalculator optimizedCalculator;

	@BeforeClass
	public static void setup() throws Exception
	{
		system = new FunctionsPointReader().execute(MainProgram.INSTANCE_DIRECTORY + "BolsaDeValores/functions-point.xml", MainProgram.INSTANCE_DIRECTORY + "BolsaDeValores/stakeholders-interest.xml");
		classicCalculator = new ClassicFunctionPointsCalculator(system);
		optimizedCalculator = new OptimizedFunctionPointsCalculator(system);
	}
	
	@Test
	public void testSolutionsFromDissertationClassic10p()
	{
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110000000000110010010000000100000000111000000011010110011111110000000000000000000001001000000000000011000000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(126, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000100000000100110011100100000100000000100000000011001111100111110000000000000000000000000000000000000101000000000000000100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110000010101000101000000101000000000011000000001001110101111110000000000000000000000001000000000000110100000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000100000000000110000010011000101100011100001000000110000010011010110111111000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000010000000100000000011010111110000000000000100010000010011011110111111010000000000000000000000001000000000000000000000000000000000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(125, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010010000011000100110000000010000000100010000011011110101111000010000000000000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000011110110010010000000000000010000000011011010100111110000000000000000000000001000000000000111100000000000000000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000100010101101101100000100011000000000000000011011111101011010000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110100000100010000100110000000000000110010000011011110011111010010000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000010000000110100000100100101111001000000000000101000000011010111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000001010101011100000000000001000111000000011010110111110010000000000000000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(126, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000100000000000111000110001101000100000110000000011011110100111010000000000000000000000000000000000000101100000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(126, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000010110011011010010000000000000011010000011011111101111000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110000000011100010110000010010000000100000000011010101111101010010000000000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(125, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110000000110010100010000000010000000000010000011010111111011100000000000000000000000000000000000000011000000000000001000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000100000010000011010100000100010000000000000000011011110110111110000000000000000000000000000000000000001000000000000001100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(125, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000100000000100010000010000001000100000110010000011011010111110110000000000000000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010000010010000101001000010011100000110010001011010011111110110010000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010010010011110001010010000010000000100000000011011111000111000000000000000000000000001000000000000100100000000000001000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010010010011100011101000000000000000101000000011000111101110010000000000000000000000000000000000000111000000000000001000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000000000000110000000101001000000000000000000000010000000011011101111111010000000000000000000000000000000000000111000000000000001100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(125, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010000011110011000000010000100000000000000000011011110111110100000000000000000000000000000000000000111000000000000000000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(126, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000010011001000010100000000010000000100000000011011111111111100000000000000000000000000000000000000010100000000000000000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(126, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110100010100101111000000000011000000110000000011010011111111010000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000100110000001100001000001100000100000110000000011011010111111010000000000000000000000000000000000000111000000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010000000000100010011000000000110000010001000000101000000001011111101111110000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000100000010011000010010011010000000000110000000011010111100101010000000000000000000000100000000000000101100000000000001000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(126, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010010010000110011001001010010000100110010000011011110101111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010000000101000010000000100000001000011010000010011111101111010000000000000000000000001000000000000111100000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(127, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010000000111001011000001010011000000000000000011011101110011110000000000000000000000000000000000000000100000000000000100000000000000000000000000000000000000000000000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic20p()
	{
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001010000000110110001111111111111101101001100000101000000011111111111111110100000000000000000000001000000000000111101010100010110100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010000000000110100011101111111110110010111100000110010100011011111111111110000000000000000100000000000000000000111001010101010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010100000000110110011111111111000011110110100000110000000011011111111111110000000000000000010000001000000000000111101010101000111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(239, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010000000000110000011111111111110011001001100000110000000011011111111111110100000000000000000000001000000000000111101010011001111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001000000000110100010111110111011110110001000000111010000011111111111111110000000000110100000000001000000000000111100010101010110100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000100000000000110000001111111101111010011011100000111010000011011111111111110100000000110010000000000000000000000111100010100010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001001000000110000010111111111011011001100100000110000100011011111111111110010000000000000000000000001000000000111100011111110010100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110110011111111111101101110110110000111010000011011111111111110000000000000000010000000000000000000111100010100000100111010000000000000000000000000000000000000000000000000000]")));
		assertEquals(239, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110000011111111111110111110011100000100000000011011111111111110000000000000000100000000000000000000110100010101010111111100000000000000000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000000000000110110010101111111111111101001000000111001000011011111111111110010000000000000100000000001000000000111100101010101001100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000110000000000110010011111101111111000100111110000111010100011011111111111110000000000000000000000000000001000000111101010101010010100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001110000000110110010011111101110001111100100000110010000011011111111111110000000000000000000000000000000000000111100010101010111101000000000000100000000000000000000000000000000000000000]")));
		assertEquals(238, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000001000000110010011111111111110101110101110000110010000011011111111111110000000000000000000000001000000000000111100010101010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(238, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010000000000110010010111111111100011100110000000111010000011011111111111110000000000111100000000001000000000000011100010100010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000010000000110110011111101101111100101101000100111010000011111111111111110000000000000000000000101000000000000111101000001010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010000000000110010011111111111111101110110000000111000001011111110111111110000000000000000000000000000000000000111100011001111101000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(238, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000100100000000110010011101110111111100010101101000110010000011011111111111110000000000000000010000000001000000000111100010101010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(238, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000100000000000010110010111111111110111110010000000110010000011011111111111110000000000000000010000001001000000000111101010101010101100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000100000000000110110010111111111111110001011100000111010000011011110111111110010000000000000000000100000000000000111101010101000111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001010000000111100010111111101111011110111000100111001000011011111011111110000000000000000000000001000000000000111100010101000111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(238, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000100000000110000010111111001101110011111100100111000000111011111111111110000000000000000000000000000000000000111100011110110101100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000000010000000100100011111111111011111010111100000111000000011011111111111110000000000000000000000001001000000000111100010100010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(238, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000011000000110110011111110111110110101100000000110000100011011111111111110000000000000000010000001000000000000111100010101010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(238, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001000000000110010011111111110111001000100100000111000000011011111111111110000000000000000000000001000000000000111100001111101111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000100000000110110010111011111101101111011100000110010000011011111111111111000000000000000100000000000000000000111100101010101001100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010100000000110000011110111111111111011110000000111010010011011111111111110000000000000000000000000000001000000101100010101010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(239, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000100000000110110000111011111111001000000010000010000001011011111111111110000010001000000000000000000000000000111110011011101111100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000011000000110100011011111111111000101101100000110010000011011111111111110000000000000000000001001000000000000010100011111101001100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(240, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000100000000000110100011101111111101100011011101000101000000011010111111111110000000000000000100000100000000000000110100011001111111100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(239, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000110000000110100010111110111110100111111100000110000001011011111111111110000000000000000100000000000000000000111101010101010011100000000000000100000000000000000000000000000000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic30p()
	{
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000011111000000110110011111111111111111110111100100111010000011011111111111110000000000000000010001000000001000000111110111111111111111100000000001111000000000000000000000000000000000000000]")));
		assertEquals(345, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011110000000110110011111111111111011111111110100111010000011011111111111110000000000110010110001000000001000000111101111111111111101010000000000100000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000011111000000111110011111111111111011111111100100111010010011011111111111110000000000000000110000001001001000000111111111111111111110110000000000000000000000000000000000000000000000000000]")));
		assertEquals(350, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000011000000111110011111111111110111111111100000111010001011011111111111111100000000111110010000000000000000000111111111110111111111100000000000100000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000110011000000110100011111111111111011111111100000111010011011011111111111110110000000110010110000001000001000000111111011111111011111110000000000100000000000000000000000000000000000000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000111010000000111110011111111111111101001111110000111010001011111111111111110000000000111100100000001000001000000111111011111111111111100000000000000000000000000000000000000000000000000000]")));
		assertEquals(349, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000110111000000110110011111111111111111101111100000111000000011011111111111110000000000110110010000001000000000000111111111111111111111110000000000100000000000000000000000000000000000000000]")));
		assertEquals(351, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000011101000000111110011111111111111111011011100000111010000011011111111111110000000000111010110001001000000000000111111111111111111100000000000000110000000000000000000000000000000000000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000100111000000111010011111111111111111011111110100111010100011011111111111110000000000111110110000101000000000000111100011111111111111100000000000100000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111100000000110110011111111111111111111111110000111010000011011111111111110000010000000000110000101001001000000111101111111111111111100000000000100000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000110011000000110110011111111111111111111111100000111010000011011111111111110000011010111110010000001001000000000111110011111111111101100000000000100000000000000000000000000000000000000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000011010000000110100011111111111111111111100100000111010000011011111111111110000011101111010110000000000000000000111111111011111111001100000000000100000000000000000000000000000000000000000]")));
		assertEquals(360, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000111111000000110110011111111111111011111111100000111010000111011111111111110000011111000000000000100000000000000111111011011110011111110000000000100000000000000001000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000110110000000111110011111110111111011111110100000110010000011011111111111110110011111000000010000001001000000000111111111111111111110100000000000100000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000011100000000110010011111111111101111111111100000111011000011011111111111110000011010110110000000001000000000000111111111111111111111100000000000100000000000000000000000000000000000000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111110000000110110011101111111111111111111100000111011000011011111111111110110000000111110010000101001000000000111111111111111110100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000101111000000110110011111111111111100111110100000111010000111011111111111110010000000111010100000000001000000000111111111111111111111100000000000100000000000000000000000000000000000000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001011000000110110011111111111111110110110100000111010000011011111111111110000011110111000010000000001000000000111110111111111111111110000000000100000000000000000000000000000000000000000]")));
		assertEquals(349, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000111010000000110110011111111111111111101111100000111010001011111111111111110000000000111110010000000000000000000111111111111111111111100000000000100000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111111000000110010011111111111111111111110100000111010000011011111111111110110000000000000110000101000001000000111111011111110111101100000000001111000000000000000000000000000000000000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011011000000111110011111111111111111111101100000111010000111011111111111111000000000111110010000100001000000000111111011111111111001110000000000100000000000000000000000000000000000000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000101111000000111110011111111111111011111011000000111010100011011111111111111000000000111110100000101000000000000111111011111111111011110000000000100000000000000000000000000000000000000000]")));
		assertEquals(350, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000110111000000110110010111111111111111111111100000111000000011111111111111110000011101000000110000001000000000000111111111111111111110010000000000100000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001111000000111110011111011111111111111011100000111011000011111111111111110000000000111000010001000000001000000111111111111111111101110000000000100000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010100000000110110011111111111110111111111100000111010100011011111111111110000011001111000110000000000000000000111111111111111111101110000000000100000000000000000000000000000000000000000]")));
		assertEquals(352, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000011100000000111110011111111111111111111101100000111001000011011111111111111000000000111010100000000001000000000111110111111111111111100000000000100000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001011000000110110011111111111111111011011100000111010000011011111111111110000000000111010110001001000001000000111100011111111111111100000000001111000000000000000000000000000000000000000]")));
		assertEquals(353, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000111010000000110110011111111111111101111111100100111010100011011111111111110010011110000000010000001001001000000111111111101111111101000000000000100000000000000000000000000000000000000000]")));
		assertEquals(350, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000100011000000111110011111111111111111111111100000111010000011011111111111110000011101000000110000001000000000000111100111111111111111110000000000100000000000000000000000000000000000000000]")));
		assertEquals(349, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000101010000000110110011111111111111111111110100100111010000111011111111111110000011100111100000001001001001000000111111111101111111100000000000000100000000000000000000000000000000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic40p()
	{
		assertEquals(458, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111000100111010001011011111111111110000110000111110110000001001001000000111111111111111111111110000000000100000000001100000000000001100000001101000]")));
		assertEquals(455, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111110100000111011000011111111111111110100011111111110010000001001001000000111111111111111111111110000000000100000000001100000001100000000001100000000]")));
		assertEquals(465, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000011111000000111110011111111111111111111111110000111011001011111111111111110100011111111010110001001000001000000111111111111111111111110000000001111000000000000001101010000000000000000000]")));
		assertEquals(463, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110111111111111111111111111100000111011110011011111111111110100011101111110110000101000001000000111111111111111111111110000000001111000000000000000001100000000000000000000]")));
		assertEquals(471, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000111111000000111110011111111111111111111111110000111010000011011111111111111010011110111110110001001001000000000111111111111111111101110000000001111000000000000001100000000000000001101000]")));
		assertEquals(472, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111110111100100111011000011011111111111111000011111111110010001001000001000000111111111111111111111100000000001111000001100000000000000000000000001110000]")));
		assertEquals(471, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110111111111111111111111111110000111010011011011111111111111000011110111110100000101000001000000111111111111111111111100000000000100000000000001100000000000000000001111000]")));
		assertEquals(477, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111111000000111110111111111111111111111111100000111010001011011111111111110100011111111110100000101000000000000111111111111111111111100000000000100000000000000001110000000000000001101000]")));
		assertEquals(473, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000011111000000111110111111111111111111111111100000111010001011011111111111110100011110011110110000101001000000000111111111111111111110010000000001111000001001000000000000000001100000000000]")));
		assertEquals(480, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011111000000111110011111111111111101111111100000111010010011111111111111110010011111111110100001101000000000000111111111111111111111110000000001110000000000000001100000101110000000000000]")));
		assertEquals(458, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000011111000000111110011111111111111111111011110100111010000011011111111111110010011111111110110000001001001000000111111111111111111111110000000001111000000000000000001101100000000000000000]")));
		assertEquals(466, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000110110011111111111111111111111101100111011000011011111111111110000011101111110100000101000001100000111111111111111111111110001100000100000000000000000000001100001100000000000]")));
		assertEquals(466, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111111000000111110011111111111111111111111100000111010001011011111111111110010011101111100110000001000001000000111111111111111111111110000000001111000000001100000000000000000001100100000]")));
		assertEquals(457, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111100100111010001111011111111111110100001110110110110000001001001000000111111111111111111111111100000001111000000000000000001100000000000000000000]")));
		assertEquals(477, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111101111101000111010000011011111111111110001111101110110100000001001001000000111111111111111111111110000001101101000000000000000000000000000000001101000]")));
		assertEquals(466, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111100000111011011011011111111111111000011111111110100000001000001000000111101111111111111111110000001101111000000001110000000000000000000000000000]")));
		assertEquals(473, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000110111000000111110011111111111111111111111100000111010000011011111111111110001111111111110110000000000001000000111111111111111111111110000000001101000000000001100000001110000000000000000]")));
		assertEquals(466, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111111000000111110011111111111111111101111100000111011100111011111111111110110011111111100110000101001001000000111111111111111111111100000000001111000001011100000000000000000000000000000]")));
		assertEquals(466, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111100000111010110011011111111111110100011111111110110001001000000000000111111111111111111111110000000001111000000000000000000000000001100001100000]")));
		assertEquals(466, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000111111011000000111110011111111111111111111111101100111011110011011111111111110000011101111110000000001001000000000111110111111111111111110000000001111000000000000000000000000001100001100000]")));
		assertEquals(480, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000010111111000000111110011111111111111111111111100000111010110011011111111111110100011111111000100001001000001000000111111111111111111111110000000001111000000000000001100000000000000100000000]")));
		assertEquals(466, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111011000000111110011111111111111111111111100100111010000011111111111111111000011110111010010000001000001000000111111111111111111111110000000001110000001100100000000000000000000001101000]")));
		assertEquals(479, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111001000000111110011111111111111111111111111000111011000011011111111111111000011111111000100000001000001000000111111111111111111111100000000000111000000000000001100000001100000001101000]")));
		assertEquals(473, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111110100111010001111011111111111110000011101000000110000101001000000000111111111111111111111110000000001111000000101100000000000000000001110000000]")));
		assertEquals(472, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111100001111011011011011111111111110100011011000000110000000000001000000111111111111111111111110000000001111000000001100000000000001000000001101000]")));
		assertEquals(480, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111101000111011000111111111111111110110011111011110110000000000000000000111111111111111111111110000000001111000000000000001100000000000001100000000]")));
		assertEquals(471, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000111111000000111110011111111111111111111111101000111010000011011111111111110001011101111010110000001001101000000111111111111111111111110000000001111000000000000000000000000000000001101000]")));
		assertEquals(466, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111010000111110011111111111111111111111100000111011100011011111111111110000011111111010110000001001001000100111111011111111111111110000000001111000000000000000000000000000000001100000]")));
		assertEquals(473, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000110111100000111110011111111111111111111111100000111010000011011111111111111000011111111010110000001001000000000111111111111111111111100000000001111000001100000000000000000000000001101000]")));
		assertEquals(480, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111110100111010000011011111111111110010100000111100110000001001001000000111111111111111111111110001100001111000001100001000000000000000000000000000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic50p()
	{
		assertEquals(593, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111100010111011000011111111111111110000011111111110110000101000001000101111111111111111111111100000001101111000000000000001100000000001101101111100]")));
		assertEquals(577, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000100111111000000111110111111111111111111111111101011111010000111011111111111110010011111111110110001101000001110000111111111111111111111100000000001111000000000001110001100000000001101101100]")));
		assertEquals(600, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111110011111010000011011111111111111001111111111110110000101001001000000111111111111111111111111001100001110000000000000001100000001100001101101000]")));
		assertEquals(586, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101010000111111111000000111110011111111111111111111111100000111011010111111111111111110010011111111100010000001000001000000111111111111111111111110001101111110000000001110000000001100000000001111100]")));
		assertEquals(591, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000110111111000000111110111111111111111111111111110111111011000111011111111111110001111101111110110000100001000000000111111111111111111111100000000001111000000001111110000001100000000001111000]")));
		assertEquals(591, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000011111111000000111110111111111111111111111111101011111010001011111111111111111111111110111110110000101000001000000111111111111111111111111110000001111000000000000000000000001101100001101100]")));
		assertEquals(600, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000111111111000000111110111111111111111111111111101000111010100111111111111111110010011111111010100001001111001000000111111111111111111111110001100000100000001100001110000001101110000001101000]")));
		assertEquals(599, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00101010000010111111000000111110011111111111111111111111101011111010100011111111111111110000011111111110110000001001001111000111111111111111111111110000000001111000001100000001110000001000000001101100]")));
		assertEquals(579, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111011101000000111110011111111111111111111111100000111010101111111111111111110001111111111100110000001001001000000111111111111111111111110000001111111000000001101100000001001001100001101000]")));
		assertEquals(600, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000111000111111000000111110111111111111111111111111100100111011010011011111111111111010111101111110110000001001001000000111111111111111111111101100000001111000000000000001110000000001100001111000]")));
		assertEquals(599, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111100100111010001111011111111111111001111111111110110000101001001000000111111111111111111111010001100001111000001110001101110000000000000001111000]")));
		assertEquals(591, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100000000111111111000000111110111111111111111111111111110100111011001111011111111111111101111101111110110000000001001000000111111111111111111111111100001101111000000000000000000001100000001101101000]")));
		assertEquals(593, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000101111111000000111110011111111111111111111111100011111010001011111111111111110000011100111110110001001001110100000111111111111111111111110000001101111000000000001001100001100000001101010000]")));
		assertEquals(585, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111111111111111111111111111111110011111110000011011111111111110001011111111110110000001001001000000111111111111111111111110000000101111000000001100000000001111100000001111000]")));
		assertEquals(585, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111010010111110111111111111111111111111101100111011100011011111111111111101111111111100110001001001001000000111111111111111111111110000000000100000000001100001101101100000000001100100]")));
		assertEquals(593, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11000000000000111111010010111110111111111111111111111111100111111011001011111111111111110000011111111100110000001001001000000111111111111111111111110000000001111000001100000001101110000000001111101000]")));
		assertEquals(592, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111101111111010001011011111111111110101111100111110100000101001111000000111111111111111111111110000000001111000000000000000001101110000001101111000]")));
		assertEquals(570, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111100000111010110111011111111111111011111111111110110000001001111000000111111111111111111111110000001101111000000001100000001100001101100000000000]")));
		assertEquals(578, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110111111111111111111111111101100111010011011011111111111110000011111111110110000101001001000000111111111111111111111110001100001111000001101101100001100000000000001101000]")));
		assertEquals(593, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100000000111111101000000111111111111111111111111111111101100111111010111011111111111110001111111111110010001001001001000000111111111111111111111110000000001111000000001100001110001101110000000000000]")));
		assertEquals(593, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111101111111010000111111111111111111001111111111110110000001001001000000111111111111111111111110001101101111000000000000000000001110000001101100000]")));
		assertEquals(614, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110111111111111111111111111100111111010000111011111111111110010011111111010110001001001001000000111111111111111111111110000000001111000001100001101100000001001000001101100]")));
		assertEquals(592, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000110111111000000111110111111111111111111111111100011111010100111011111111111110010011101111110110000001001001000000111111111111111111111110001000001111000000000000001100001000001101111101000]")));
		assertEquals(598, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111010011111110011111111111111111111111111011111010000011011111111111110000011110111100110000001001001000000111111111111111111111110000000001111000001001100001100001000000001001111000]")));
		assertEquals(614, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101010000111111111000000111110011111111111111111111111110000111011110011111111111111110110011111111110110000001000000000000111111111111111111111110000001001111000001000000000000000001101111101101000]")));
		assertEquals(592, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111101000000111110011111111111111111111111100000111010010111011111111111110011111111111100010000101001001000000111111111111111111111110000001101111000001100001110001100000001100001111000]")));
		assertEquals(579, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111101000111010010011111111111111111001111110111110110000101001001000000111111111111111111111110000001101111000000001100000001100000001110001111100]")));
		assertEquals(591, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111111000000111110111111111111111111111111110000111010101011111111111111111000011111111100110001001001001111000111111111111111111111110000000001111000001100000001100001100000001101101100]")));
		assertEquals(571, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111111000000111110111111111111111111111111100000111010000111111111111111110010011111111010110000101111001000000111111111111111111111110001100001111000000000110000001101100001100001101000]")));
		assertEquals(597, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111011111000000111110111111111111111111111111110000111010000011111111111111111000011111111110110000001001001000000111111111111111111111111100000001111000000000001101110000001110000001101100]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic60p()
	{
		assertEquals(690, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101010000000111111010011111111111111111111111111111111110000111110010111011111111111110110011111111010110000001111111000000111111111111111111111110000001101111000001110000001111100000001111101101000]")));
		assertEquals(705, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101100111111111111000000111110111111111111111111111111110000111011010011011111111111111011111111111100110000001111000110000111110111111111111111110000001111111000000000001101100000001101111101101000]")));
		assertEquals(691, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111010011111111111111111111111111111111100010111011011011011111111111111001111111111100110000101001110000000111111111111111111111111101101101111000000001100000001101101100000001111000]")));
		assertEquals(705, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101100110111111111000000111111111111111111111111111111101011111110011011011111111111111001111101111110110001001001111000000111111111111111111111110000000001111000001100001101101110001100000001101100]")));
		assertEquals(698, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101010000111111111101000111110111111111111111111111111100000111011000111011111111111110011111111111110110001001000111000110111111111111111111111110000001101111000001110000001111100001100001101101000]")));
		assertEquals(692, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111010011111110011111111111111111111111101111111010000011111111111111111101111111111110110000001001001110000111111111111111111111110000001101111000000001110001101100001101111101111100]")));
		assertEquals(699, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111111111110111110111111111111111111111111101111111010110111011111111111111011111110111110110000101111001000000111111111111111111111011110000001111000000001100001101101101111100001100000]")));
		assertEquals(699, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111111101111111111000000111110111111111111111111101111100011111010001011011111111111111101111111111110110000001001001110000111111111111111111111110000000001111000000001101101011100001101110001101000]")));
		assertEquals(699, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111000000111111111111111111111111111111111000111110010111111111111111110101111111111110110000101110001000110111111111111111111111111100001111111000000001100000001101101101100001101000]")));
		assertEquals(698, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101010000111111111000000111111111111111111111111111111111100111111000011011111111111110101111111111110010000001001101110000111111111111111111111110000000001111000000001101101100001110001101111101100]")));
		assertEquals(705, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111110111111111000000111111111111111111111111111111101000111111000011111111111111110001111111111110110000101001000000000111111111111111111111110001101101111000000000000001101101101100001101101000]")));
		assertEquals(696, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101000000111111111010011111110111111111111111111111111100111111011011111011111111111110101111111111110110000101001001110000111111111111111111111110100000001111000000001110001110000001101110001111000]")));
		assertEquals(706, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[00101111110111111111000000111110111111111111111111111111110100111011001111011111111111110011111110111110110001001101001110000111111111111111111111110001101101111000000000001110001100001100001101101000]")));
		assertEquals(690, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111010010111110011111111111111111111111101000111011101011111111111111110111111111111010110000101001111111000111111111111111111111110001110001111000001100001100001111101101100001101000]")));
		assertEquals(719, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111101111111111111000000111110111111111111111111111111100000111011001111011111111111110110011111111110110000001000001000000111111111111111111111110001101111111000001111100000000000001111101101110000]")));
		assertEquals(712, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101011111111111111000000111110011111111111111111111111110011111011000111111111111111111100011111111010110001101001001111000111111111111111111111111100001101110000001101100000000001100001101101101000]")));
		assertEquals(706, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101010000111111111000000111110111111111111111111111111100011111010010011011111111111110001111111111110110000101001111110000111111111111111111111110000001101111000001110001110000001111101101000100000]")));
		assertEquals(713, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111011101111111111000000111110011111111111111111111111101111111011000111011111111111110110011111111110110000101001000110000111111111111111111111111010000001111000001100000001101111111100000001111100]")));
		assertEquals(720, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101010000111111111000000111110111111111111111111111111101100111011101111011111111111111101111111111110110000101111001000000111111111111111111111110000001101111000001100001110000001101111110001111100]")));
		assertEquals(720, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111101111000111111000000111110111111111111111111111111110100111011000111011111111111110011111111111110110001001001110110000111111111111111111111110000000001111000001100001111110001100001110001111000]")));
		assertEquals(720, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110101101111111111000000111110111111111111111111111111110001111010000111111111111111111001111111111110110000001110001000000111111111111111111111110001110001111000001110001100001110000000001111101100]")));
		assertEquals(706, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111101111000111111000000111110111111111111111111111111100100111010100011111111111111111011111110111110110001101111001000110111111111111111111111111100000001111000001111110000001100000000001101111000]")));
		assertEquals(699, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111011111000111111000000111110111111111111111111111111100011111011001011011111111111110000011111111110110000001101001110100111111111111111111111110000001111111000000001100000001111111100001101100000]")));
		assertEquals(713, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101111101000101111000000111110011111111111111111111111100011111010000011011111111111110111111111111110110000001111111111000111111111111111111111110001100001111000001110001100001110001101000001101000]")));
		assertEquals(692, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111000000111111111111111111111111111111101100111110011011011111111111111001111111111110110000101001111000000111111111111111111111111111100001111000001101100001100000001110001101111100]")));
		assertEquals(699, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111111101111110111111111111111111111111111100111011100111011111111111110111111111111110110001001001001110000111111111111111111111100001100001111000000001101101100001111100000001111000]")));
		assertEquals(699, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111000111111000000111111111111111111111111111111110100111010011011111111111111110001111111111100110000101001001000000111111111111111111111111110000001111000001001101101100000000001101101101100]")));
		assertEquals(712, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111101000111111111111111111111111111111100000111110110111111111111111110001111111111110110000001001111000000111111111111111111111111100001101111000001101001111100000000001110001101100]")));
		assertEquals(696, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111110110111111111000000111110111111111111111111111111101011111011100011111111111111110001111110111000110000001001001000000111111111111111111111111101101101111000000001100001100000000001111101101000]")));
		assertEquals(720, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111101110000111111010011111110111111111111111111111111110000111010000111011111111111110100011111111110100000001001001000000111111111111111111111110001111111111000001101110000001111101100000001111000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic70p()
	{
		assertEquals(819, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01110000110111111111111111111110111111111111111111111111111011111010011011011111111111110101111111111010110001001111111110000111111111111111111111111101100001111000001100000001101101101101101101101000]")));
		assertEquals(805, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111000000111111111111111111111111111111101100111010100011011111111111110011111111111110110000101111111111000111111111111111111111110001101101110000001101101101101110001100001101101100]")));
		assertEquals(812, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111011111111111000000111110111111111111111111111101100111111010000111111111111111110101111111111110110011101111111110110111111111111111111111110001101101111000000000001101110001111101111101101000]")));
		assertEquals(818, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101110101111111111010011111110111111111111111111111111110011111010001111111111111111110001111111111110110001101111111000000111111111111111111111111110001101111011001110001101100000001111101111101000]")));
		assertEquals(805, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101010000111111111010011111110111111111111111111111111100011111010001111111111111111111001111111111010110000101111111110110111111111111111111111111101101101111000000000001101111101101101110001101100]")));
		assertEquals(818, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110110111111111111000000111111111111111111111111111111100100111111000011011111111111110011111111111110110000001111111000110111111111111111111111111101101111111000000001111101101100001111110001111000]")));
		assertEquals(819, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111110111111111000000111111111111111111111111111111110100111111100111011111111111111101111101111110110000101001001111110111111111111111111111111101111101111000001100001101111110000001101101101000]")));
		assertEquals(812, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100110111000111111111111111110111111111111111111111111101111111011101011011111111111110001111111111110110001101001001110110111111111111111111111110000001101111000001111101110001101101111101101100000]")));
		assertEquals(811, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111110111011111000000111111111111111111111111111111100011111110111011011111111111110001111111111110110000101111111000111111111111111111111111111101101101111000001101100001110001100001101101101000]")));
		assertEquals(805, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111000000111111111111111111111111111111100111111011010011011111111111111101111111111100110000001101111110000111111111111111111111111101101101111000001101100000001111101100001111101100]")));
		assertEquals(818, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111101000111111111111111111111111111111110000111011001011011111111111110001111111111110110000101111111110000111111111111111111111111111101111111000000001101101100000001100001101111100]")));
		assertEquals(811, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111111111111111111000000111111111111111111111111111111101011111110101111011111111111110000011111111110110001001000111110000111111111111111111111111111101101111000000001101101101111101100001101101100]")));
		assertEquals(826, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101101111111111111000000111111111111111111111111111111100011111110100011011111111111111011111111111110110100001111111110110111111111111111111111111100001111111000000001101110000001111101100001101100]")));
		assertEquals(818, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10110111111111111111010011111111111111111111111111111111101011111111001011111111111111110001111111111110110001001111001110000111111111111111111111110001111101111000001101101101000001110001100001111100]")));
		assertEquals(826, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111000000111111111111111111111111111111100111111010001011111111111111110001111111111110110000001111111000111111111111111111111111111101100001111000001110001010000001111111111101101000]")));
		assertEquals(812, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110111110000111111010010111111111111111111111111111111100111111110000111011111111111110001111111111110110001101111111000000111111111111111111111111101100001111000001111110001101101110001111101101100]")));
		assertEquals(798, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111100000111111111111111111111111111111101111111010100111011111111111111101111111111110110000101001111000111111111111111111111111110000001101111000001001111101101110001110001111101000]")));
		assertEquals(810, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111011111000000111111111111111111111111111111111011111010010011011111111111111101111111111110110000001000001110000111111111111111111111111111101111111000000001101111101101101101100001111000]")));
		assertEquals(812, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111000000111111111111111111111111111111110000111110000111011111111111110011111111111110110000101110110000110111111111111111111111111111101111111000001101100001101101100001101101100000]")));
		assertEquals(802, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011111111111111000000111111111111111111111111111111100111111011010111011111111111111001111111111110110000101111001000111111111111111111111111111100001101111000001101101101100000001101101111111100]")));
		assertEquals(819, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111011111000000111110111111111111111111111111100101111010101111111111111111110100011111111110110000101111001110101111111111111111111111110001110001111000001101111101101100001101111111101000]")));
		assertEquals(812, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111010011111110111111111111111111111111100111111011000011111111111111111001111111111110110000101001000111000111111111111111111111110001101101111000001101101110001101101101101101111000]")));
		assertEquals(818, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101111011111111111111101111111111111111111111111111111100000111011011011111111111111111101111111111110110000100001111111000111111111111111111111110000001101111000001101101101111101100001100001111100]")));
		assertEquals(812, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111111111111111111000000111110111111111111111111111111101111111011101011111111111111110001111111111110110000101111111000000111111111111111111111110001101111111000001101100001111111100001101111101100]")));
		assertEquals(805, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111101111111110010011111111111111111111111111111111101011111110000111011111111111110011111111111010110001001001111110000111111111111111111111111110001101111000001111100001110001111100001111101000]")));
		assertEquals(805, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101101111111111111010010111110111111111111111111111111100011111010001011011111111111110101111111111110110001001111001000111111111111111111111111111110001111111000000001111101101101111101000001111000]")));
		assertEquals(803, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101110111000111111010011111110111111111111111111111111100111111010001011111111111111110011111111111110110001001001111110110111111111111111111111110001101111111000000000001101111111001101111101101000]")));
		assertEquals(819, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011110111111111010011111111111111111111111111111111100011111011101111011111111111110011111111111110110000001001001110111111111111111111111111111101100001111000001111101110001111101100000001111000]")));
		assertEquals(826, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111101111111111000000111110111111111111111111111111110000111010000111011111111111110001111111111110110001001001111111111111111111111111111111110001101101111000001101111110001111100001101101111000]")));
		assertEquals(798, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111110111111111111111111111111110111111010010111011111111111110001111110111010110000001001001000110111111111111111111111111101111101111000000001101101101110001111101101100000]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic80p()
	{
		assertEquals(917, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101101111111111111111111111111111111111111111111111111111011111110100011011111111111110001111111111110110100101111111110111111111111111111111111111100001111111000000001101111101111111101111101101000]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111101011111010001011011111111111110111111111111110110000001111111100111111111111111111111111111101111101111000001110001111101101111111111111101000]")));
		assertEquals(917, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111110000111111111111111110011111111111110110110001110111111110111111111111111111111111100001111111000001101101111100001101111101101101000]")));
		assertEquals(916, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111110111111111111111111111111101011111010110111011111111111110011111101111111111000101111111110110111111111111111111111110001111111111000001101111101101111111101101101101000]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111010001111111111111111111111111111111110011111111001111011111111111110011111111111110110001001111111000111111111111111111111111111111111101111000001100001111111101111111111111111000]")));
		assertEquals(909, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111100111111111000111011111111111110001111111111110110000001111110110110111111111111111111111111101111101111000001101101101101111101111101111101000]")));
		assertEquals(911, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111111100111111111111111111111111111111100011111110000011011111111111110001111111111110110001101111000110110111111111111111111111111101101101111000001101111111111111111101111101101100]")));
		assertEquals(923, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111110111111111111111111110111111111111111111111111100111111011000011011111111111111101111111111110110000101111110110111111111111111111111111111101111111111000001101101111101101110001111101101100]")));
		assertEquals(911, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110011111111100111111111111111110001111111111110110001001001001000000111111111111111111111111111111111111000001111101101101111111111111101111100]")));
		assertEquals(916, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111000111111111111111111111111111111111111111111100011111110010111011111111111110111111111111110110100001111111110111111111111111111111111111100001111111000001101111101110001101101111111111100]")));
		assertEquals(911, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111100111111110011111011111111111111011111111111110110001101111001110110111111111111111111111111101101101111000001101101111101111111101101111101000]")));
		assertEquals(925, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111111111111111111111111111111111111111101011111111000011011111111111110101111111111110110101001111111111111111111111111111111111111110000001111000000001111101101111101111101111101100]")));
		assertEquals(916, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111110111110111111111111111111111111110011111011100011011111111111110001111111111110110111101111111110110111111111111111111111111111101101111000001111100001101100001111111101111100]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111110011111111111111110111111111111111111111111111111100011111110111111011111111111111001111111111110110001001111111110111111111111111111111111111100001111111000001100001111111101111101101111101100]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111111111111111111111111110111111111111111111111111110111111010100011011111111111110001111111111110110000001111111000110111111111111111111111111111111111111000001101101111101101101111111101101000]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111101111111111111111111111111111111111111111111111111111011111110000011011111111111110001111111111110110000101110110110100111111111111111111111111101111101111000001101111110001101101111111101111000]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111110111111111111111111110111111111111111111111111101011111010001011011111111111110101111111111110110001001111110111000111111111111111111111111111101111111000001111111111101101101101101111101000]")));
		assertEquals(910, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111000111111111111111111111111111111111111111111101111111111110111011111111111110101111111111110110000101111111110110111111111111111111111101101101101111000001101101101101111101101101111101000]")));
		assertEquals(903, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111100011111110000011011111111111110001111111111110110101001111110110110111111111111111111111111101101101111000001101111101101110001111101101111011]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111110111111111111111111111111101011111011100111111111111111110101111111111110110000001111111100110111111111111111111111111101111101111000001101111101101111101111101111101100]")));
		assertEquals(911, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100111111110010111111111111111110001111111111110110001101111110110000111111111111111111111110001101101111000001101111111101111101111101101101100]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111101111111111111111111110111111111111111111111111101111111011100011011111111111111001111110111110110110001111111110110111111111111111111111110001101101111000001111101111111101101101111101101000]")));
		assertEquals(910, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111101111111111111010011111111111111111111111111111111100111111111001011011111111111111101111111111110110100001111110111111111111111111111111111110001101101111000001101101111101101111101101111101100]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011111111111111111111111110111111111111111111111111101011111010001111011111111111110001111111111110110001001111111100110111111111111111111111111101111101111000001101101111111101111101110001101010]")));
		assertEquals(904, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111110111111111110111111111111111111111111111111111101111111110100011011111111111111101111111111110110000001111111110000111111111111111111111111101101101111000001111101101101101111110001111101111]")));
		assertEquals(910, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111010011111111111111111111111111111111100011111110000011011111111111111111111111111110110000101111111000110111111111111111111111111101111101111000001111111101111111111101111101101000]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111110111111110000011111111111111111011111111111110110101001111111100110111111111111111111111111101101111111000001111101101110001101101111101101100]")));
		assertEquals(911, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111000000111111111111111111111111111111111011111111001011011111111111110011111111111110110111001111111110110111111111111111111111111101111111111000001111101101101001101111101101111000]")));
		assertEquals(917, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011111111111111111111111110111111111111111111111111100011111010000011111111111111111011111111111110110001001101111110110111111111111111111111111101111111111000001101101101101101101101111111101000]")));
		assertEquals(918, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111110111111111111111111111111100011111011011011011111111111110001111111111110110010101111111110111111111111111111111111111111101101111000001101111101101101101101101101111100]")));
	}
	
	@Test
	public void testSolutionsFromDissertationClassic90p()
	{
		assertEquals(1023, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111111001111011111111111110101111111111110110101101111111111110111111111111111111111111111111111111101001101101111111111111111111111111100]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111111010011011111111111111101111111111110110101101111111111110111111111111111111111111111101111111000001111111101111111111111111111111110]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111110111111011111111111110111111111111110110110001111111110110111111111111111111111111111111111111000001111111111111111111111101101111011]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100111111110111011111111111111111001111111111110110111101111111111110111111111111111111111111111111111111000001111111101101111111111101111111011]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111110101111111111111111111001111111111110110000101111111110111111111111111111111111111111101111111000001111111101111111111111111111111111]")));
		assertEquals(1017, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110111111111110111111111111111111101111111111111111011001111111111111111111111111111111111111110001111111000001111101111111111111101101111111110]")));
		assertEquals(1023, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110111111111111111011111111111111011111111111110110001101111111110110111111111111111111111111101111111111101001111111111111111111111101111111100]")));
		assertEquals(1024, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111110111011011111111111110001111111111110110110101111111111111111111111111111111111111111101111111111001111111111111101101111111101111100]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111110011111011111111111111011111111111110110010101111111110111111111111111111111111111111111111111000001111111101101111111111111111101111]")));
		assertEquals(1026, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110111111110111011011111111111110011111111111110110110101111111110111111111111111111111111111101111111111001111111101111111101111101101111111100]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111110001111011111111111110111111111111111111101001111111110111111111111111111111111111111111111111000001101111111111101101111101111111110]")));
		assertEquals(1024, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111111011111011111111111111001111111111111111101101111111110111111111111111111111111111111111111111000000001111111111111101111111101111111]")));
		assertEquals(1023, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111111111110111011111111111111110001111111111111111010101111111111110111111111111111111111111111111101111000001111111101101111111111111111111100]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110111111111100111111111111111111101111111111110110111101111111111111111111111111111111111111111101101111000001101111111111101111101111111111011]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101111111111101011111111111111111111111111111110110101001111111111111111111111111111111111111111101111111000001101101111111101111111111101111111]")));
		assertEquals(1022, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111110011111111111111111111011111111111111111010001111111111110111111111111111111111111111111101111001001111101111101101111111111111111100]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111110101011111111111111110111111111111111111100101111111110111111111111111111111111111101101111111000001101111111101101111101111111111111]")));
		assertEquals(1023, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110011111110011111011111111111110111111111111110110011101111111110111111111111111111111111111111111111111000001111111111111111111111111111111100]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111110101111011111111111110011111111111110110111101111111110111111111111111111111111111111111111111000001111111101101111111101111111111111]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110011111110001011111111111111111001111111111111111011101111111110111111111111111111111111111101111111111000001111101101111111111111101101111111]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110111111110010011011111111111111011111111111110110111001111111110111111111111111111111111111111101111111000001101111111111111111111111111101111]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111111000111011111111111111011111111111110110101001111111111111111111111111111111111111101111101111011001101111101111111101111111111111110]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111110101011111111111111111011111111111110110110101111111110111111111111111111111111111111101101111000001111111111111111111101111111111111]")));
		assertEquals(1024, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111111111110100011111111111111111111111111111110110011101111111111110111111111111111111111111111101111111111001111101111111101111101111111111100]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111111111111011011111111111111110001111111111110110111001111111111111111111111111111111111111111101111111000001111101101111111101111101111111111]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111110001011111111111111110011111111111111111100001111111111111111111111111111111111111111111101111000001101111111111101101111111101111111]")));
		assertEquals(1016, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111111100011011111111111110101111111111111110100101111111111110111111111111111111111111111101111111000001111111101111111101111111111111111]")));
		assertEquals(1025, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111110010111111111111111111101111111111110110101101111111111110111111111111111111111111101101111111101111110001101111111111111101111111111]")));
		assertEquals(1024, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111101111111111100011111111111111111001111111111111111111001111111111111111111111111111111111111111101111111011001101111111101111111111111111111100]")));
		assertEquals(1017, classicCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110011111111000111111111111111111101111111111110110011101111111111110111111111111111111111111101101101111111001111111111101111101111101111111111]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized10p()
	{
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000110000101100010011001000000000000011000000011000110111111110000000000000000010000000000000000000111100000000000000000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000100000010111001010010100000010100000101010000011010010101111110000000000000000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(115, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000110000100011010001101000101000000111000000011010110111111000000000000000000010000000000000000000100100000000000000100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000111100011100000101001100000010000000011010100001111110000000000000000100000000000000000000111100000000000000100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(112, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001000000000000000000010111110010010000000000000011010000011010110111101110000000000000000000000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(115, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000110000010010010110110000000000000010000000011010110111111100000010000000000000000000000000000000111100000000000000100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(115, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110000000110001111110010100000000000100000000011010111110111110000000000000000000000000000000000000100100000000000000000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(115, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000100001000000000110000011011001001101000100000000110000000011010110111111100000000000000000000000000000000000000100100000000000000100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000010000110011011010000101010100000100000000011010110101111101000000000000000000000000000000000000111000000000000001000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(112, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000100000001110010101000011000000000100010000011001110011111010000000000000000000000000000000000000111100000000000001000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010100000100011011000000000011000000110000000011010110111011110000000000000000000000000000000000000101100000000000001100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000010000111100101110100000000000000100000000011010110110111110000000000000000000000000000000000000101100000000000001100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(109, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000000101010101010100100100000011000000011010110111111110000000000000000000000000000000000000110100000000000000100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000100000001110001110000101110100000010000000011010110111111010000000000000000000000001000000000000101100000000000000000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(115, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000010010110100111000110100001000000100000000010010110111111110000000000000000000000000000000000000100100000000000001000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(112, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001000000000000000010011011101000000110000000000100000000011010110111111110000000000000000000000000000000000000100100000000000000000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(110, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000010000111100111100100000010000000110000000011010110101111010000000000000000000000000000000000000111100000000000000100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(111, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000011001100011001001000000000100000000011011110111111010000000000000000010000000000000000000101100000000000001000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(112, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010000000100100001100000100001000000110000000011011110111111100100000000000000000000000000000000000110100000000000000100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(115, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010000000010111101110000001001000000110000000011010110111111110000000000000000000000000000000000000100100000000000001000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000001110111110010100000000000110000000011001110101111110000000000000000000000000000000000000010100000000000001100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(115, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000110000001011011111000000010000100100010000011011010101111010000000000000000000000000000000000000100100000000000001100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(112, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000111011110010000000011000000000000000011011110111111110000000000000000000000000000000000000011100000000000000000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000111110011011000100100000000110000000011100110111111010000000000000000000000000000000000000111100000000000000000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000110011000010010000100100000110000000011010111111101110000000000000000000000001000000000000101100000000000001000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110000010111111110011000000000000000000000000011010111101111000000000000000000000000000000000000000101100000000000000100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(112, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000100000000000000000000111011010001000010001000000110000000011010110111111010000000000000000000000000000000000000011100000000000001100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010000000000110000000001101000100000000000010000100000010011010110111111110000000000000000000000100000000000000111100000000000001000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000000000000011001010010101010000000000010000000011010110111111111000000000000000000000000000000000000111100000000000001100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(113, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000010100000101110110011001100001100000110000000101011010111111011000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized20p()
	{
		assertEquals(226, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000010000000110100010111111111111000101100000000110000000111011111111111110000000000000000110000101001000000000111100010101010011101000000000000100000000000000000000000000000000000000000]")));
		assertEquals(230, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010101000000110100011111101001110011100101000000110010000011011111111111110100000000000000000000001000000000000111110000111111111100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(228, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000101010000000110010011111111011111101000111000000110010000011010111111111110000000000000000100000001000000000000110101010101010011100000000000001100000000000000000000000000000000000000000]")));
		assertEquals(227, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110010010111011111110001001011100000110010000011011111111111110000000000000000000000001001001000000111110001101111111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(230, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000001000000110010011101111001111101010110100000110000100011011111111111110000000000000000110000001000000000000111110000110111101100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(221, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001010000000110100011110111101111110001011100000111000000011011111111111110010000000000000000000000000000000000111100010011010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(226, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110110011111111011110110011101100000110000000011011111111111110000000000000000010000001000000000000111110011111110110000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(227, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001000000000110110011110011111101111100010100000111000000111011111111111110000000000000000010000000000000000000111110010110101110100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(226, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011100000000110110000111111111111000101110100000110010100011011110111111111000000000000000110000000000000000000111100010101010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(226, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000000000000110110010111111111111101001001100000110010000011011111111111110000000000000000000000000000001000000111100011101011111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(221, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001000000000110110011011110111111000111101100000111001000011011111111111110000000000000000110000001000000000000111100010101010001100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(230, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110110010111011111111001111001100000110000000011011111111111110110000000100010000000000000000000000111110010111101010100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(227, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000101000000110110011100111111100110001101100000110001000011011111111111110000000000000000000000001000000000000111110001111100111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(228, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010000000000110110011111011011110011101011000000010000000011011111111111110100000000000000010000000000000000000111110101101111111000000000000000000000000000000000000000000000000000000000]")));
		assertEquals(228, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000010010000000110110000111011111110110010111000000111011000011011111111111110000000000000000010000000000000000000111100001110111001100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(226, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001111000000110100011110111011111110100011000000001000000011011111111111110000000000000000110000001001001000000111101000101000111000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(226, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000001000000100010011110111111111111100111000000110000101011011111111111111000000000000000000000000000000000000111001011011011011100000000000000000000000000000000000000000000000000000000]")));
		assertEquals(231, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000000000000110010011011111111111001000110000000111010000011011111011111110000100000000000000000000000000000000111110000111111111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(232, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000111000000000110100011111011111111000100111000000011000000011111111111111110000100000000000000000001001000000000111100000010111110100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(230, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000100101000000110110010110111111110001000111000000111010000011111111111111110000000000000000000000000000000000000111110000101111111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(226, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000100010000000110110010011011111101111001110100000110010000011011111111111110010000000000000000000000000000000000111100011110011111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(227, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000010000000110110011111011011101110001001100000111010000011011111111111110000000000000000100000000000000000000111111000110110011100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(228, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000000000000110110010101111011110011101011000000111010000011010111111111110010000000000000000000001000000000000111101010111111111000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(228, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000000000000110100011111111111111011101010000000110000000011011111111111111100000000000000100000001001000000000111100001010111110100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(224, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000010000000000110110010111111111100100001110100000111000110011011110111111110000000000000000100000001001001000000111100010101010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(227, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000001100000000110100010111111011110101001110100000110010000011011111111111110010000000000000100000100000000000000111101010010011011100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(221, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000010110000000110110010111111011011111011110000000110000000011011111111111110000000000000000000001100001000000000111000010101010111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(228, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000111000000110010011111011111110010101111100000110000000011011111111111110000000000000000100000000000000000000111110001101111001000000000000000100000000000000000000000000000000000000000]")));
		assertEquals(225, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000010000000000110110010101111011111010000010100000111010000111011111111111110000000000000000000000000001000000000111100010111110111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(223, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000000000000110010011111111111111100100110100000110000000011011111111111110100000000000000010000001000000000000111101010101010111100000000000000100000000000000000000000000000000000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized30p()
	{
		assertEquals(341, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000101110000000110110000111111111111111011111100000111000000011111111111111111000011111100000110000101000000000000111110111111111111111110000000000100000000000000000000000000000000000000000]")));
		assertEquals(339, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000101111000000111110011111111111111011111101100000111010001011011111111111110000011100000000010000000000000000000111111111111111111111110000000000100000000000000000000000000000000000000000]")));
		assertEquals(339, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011011000000110110111111111111110111110111101000111010000111011111111111111000000000111100010001001000000000000111111011111111111111000000000000100000000000000000000000000000000000000000]")));
		assertEquals(339, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011100000000110110011111111111111110110111100000111000000011011111111111110000011011011100000000000000000000000111111011111111111101110000000001111000000000000000000000000000000000000000]")));
		assertEquals(339, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001000000000110110011111111111111111111110101000111010110011011111111111110000000000111100100000001001000000000111111011111111111111100000000000100000000000000001000000000000000000000000]")));
		assertEquals(334, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111011000000110100011111111111111111101111100000111010000011011111111111110000000000111000100000000000001000000111111011111111111111110000000000100000000000000000000001000000000000000000]")));
		assertEquals(338, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011001000000111110011111111111110111110011110000111011010011011111111111110000000000111110110000000001000000000111110111111111111110110000000000100000000000000000000000000000000000000000]")));
		assertEquals(339, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000101111000000110110010111111111111101111111100100111010000011011111111111110010000000000000010000100001000000000111110111111111111111110000000001111000000000000000000000000000000000000000]")));
		assertEquals(341, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111101000000110110011111111111110111111111100000110010000111011111111111111000000000110000010001001000000000000111101111111111111111100000000000100000000000000000001000000000000000000000]")));
		assertEquals(339, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111110000000111110011011111111111111001111100100111010000011111111111111110000000000111110100000100000000000000111101111111111111101110000000000100000000000000000000000000000000000000000]")));
		assertEquals(333, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000010111000000110110011111111111110111100101100011111010000011011111111111110000011100000000110001001000001000000111111111111111111001100000000000100000000000000000000000000000000000000000]")));
		assertEquals(341, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111101010000110110000111111111111111101111110000111010000011111111111111110000010101000000110000000001000000000111111011111111111111110000000000100000000000000000000000000000000000000000]")));
		assertEquals(343, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000010110000000110010011111111111111111111111100000111010000111011111111111110000010000001010000000001000000000000111111111111111111101110000000000100000000000000000000000000000000001000000]")));
		assertEquals(338, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111110000000110100011111111111111110111111100000111010000011011111111111110000000000000000110000001001000000001111111111111111111111110000000000100000000000000000000000000000000000000000]")));
		assertEquals(339, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111110000000110110011111111111111111101111100000111010001011011111111111110010000000000000100000001001101000000111111011111111111101110000000000100000000000000000000000000000000000000000]")));
		assertEquals(343, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011111000000110110011111111111111111111111100000111010000011111111111111110000000000000000100000001001000000000111110111111111111111110000000000100000000000001000000001000000000000000000]")));
		assertEquals(341, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001111000000110110011111111111111111111111110000111010000011011111111111110000010001000000000000001000000000000111111111111111111111110000000000110000000000000000000000000000000000000000]")));
		assertEquals(339, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000010001000000111110011111111111111111111110100000011010100111011111111111110000011111000000110001001000000000000111111011111111111100000000000001111000000000000000000000000000000000000000]")));
		assertEquals(340, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000000111000000110110011111111011111101111111100000111010000011011111111111110000011100111010000000000001000000000111111011111111111101100000000000100000000000000000000001000000000000000000]")));
		assertEquals(341, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000011111000000110110011111111111111111101111110000111010000011111111111111110000000000000000110000001001001000000111111011111111111111100000000000100000001000000000000000000000000000000000]")));
		assertEquals(336, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000011101000000110110000111111111111111101111100000111010000111011111111111110000000000111100010000101000000000000111101111111111111111110000000000100000000001000000000000000000000000000000]")));
		assertEquals(339, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000111111000000110110011111111111111111110111100000111010000011011111111111110110000000000000110001001001001000000111111111111111111100000000000001111000000000000000000000000000000000000000]")));
		assertEquals(338, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001000000000111100011111111111111011111110100000111010010011011111111111110000011001000000110000001000001000000111110011111111111111110000000001111000000000000000000000000000000000000000]")));
		assertEquals(341, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000101111000000110110011111111111111111011111100000111001000011011111111111111000011001000000110000001001000000100111111111111111111100000000000000100000000000000000000000000000000000000000]")));
		assertEquals(338, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000011011000000110110011111111111111110011110100000111010000011011111111111110000011000110110110000001001000000000111110111111111111111010000000000100000000000000000000000000000000000000000]")));
		assertEquals(336, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001111000000110110011111111111111111101110100000111010110011011111111111110010100000000000110000001000001000000111111111111111111111110000000000100000000000000000000000000000000000000000]")));
		assertEquals(336, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000000111000000110110011111111111111111101111100000111010000111011111111111110000000000111110000000001000001000000111111111111111011111110000000001100000000000000000000000000000000000000000]")));
		assertEquals(340, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000001111000000110110011111111111111011110111100000111010000011011111111111110000000000111010110000101000000000000111110011111111111111110000000000100000000000000000000001000000000000000000]")));
		assertEquals(338, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00000000000000111111000000110010011111111111111111111110000000111010110011011111111111110100000000110010100000000001001000000111111111111111111110100000000000100000000000000000000000000000000000000000]")));
		assertEquals(334, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000011011000000110110011111111110111111011111110000110010000111011111111111111000000000111010110000000001000000000111111011111111111111110000000000100000000000000000000000000000000000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized40p()
	{
		assertEquals(458, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000101111000000111110011111111111111111111111100000111000100111011111111111110001100000111110110000101001111000100111111111111111111111111000000001111000000000000000000000001000000000000000]")));
		assertEquals(459, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111111000000110110011111111111111111111111100000111010000111011111111111110100011111111100010000001001001000000111111111111111111111100001000001111000001101000001001000000000000000000000]")));
		assertEquals(454, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111101000111011000111011111111111110100011101111010100000101001000000000111111111111111111111100000000001111000000000000001000001100000000001001000]")));
		assertEquals(456, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111101000111010000011011111111111111000011110111110110001101001001000000111111111111111111111100000000001110000000000001001000000000000000001100000]")));
		assertEquals(453, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111110101000000111110011111111111111111111111110000111010001011011111111111110001111101111110100000001000001000000111111111111111111101110000000001110000001000000001100000000000000000000000]")));
		assertEquals(454, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000111111000000111110111111111111111111111111100100111010000111111111111111110001111101111110000000001000001000000111111111111111111111100000000001110000000000000000000001000000000001110000]")));
		assertEquals(458, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000110111011111111111111111111111100000111010010111111111111111110000011110011110110000001001001000000111111111111111111111110000000001110000001000000000000000000000000001101000]")));
		assertEquals(451, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000011111000000111110011111111111111111111111100000111010010011011111111111110000011111111110110001101001001000000111111111111111111111110000000000100000000001100001100000000000000001001000]")));
		assertEquals(458, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111101000000111110011111111111111111111111110010111010000011011111111111111001111100100000110000101000001000000111111111111111111111111100001001111000000000000000000000000000000001000000]")));
		assertEquals(458, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111111000111010001011011111111111110010011111111010110000000000001000000111111111111111111111110000000001100000000000000001110000001000000001001000]")));
		assertEquals(458, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111101000111010000011011111111111110000010010111010100001001000001000000111111111111111111111110000000001111000001000000001000000000001000001101100]")));
		assertEquals(453, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000111111000000111110111111111111111111111111100000111010000011011111111111110100011111111110110000001000001000000111111111111111111111110000000001111000000000000000001000000001001000000000]")));
		assertEquals(460, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000011111000000111110011111111111111111111111100000111010010111011111111111110010011111111111010001101001001000000111111111111111111111110001000001110000000000000000000000000000001001000000]")));
		assertEquals(456, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110111111111111111101111111110000111010000011011111111111110100011111111110110000101000001000000111111011111111111111110000000001110000001000000000000000001101000000000000]")));
		assertEquals(456, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111101000000111110111111111111111111111111100000111010000011111111111111110010011101111110110000001001001000000111111111111111111111100000000001110000001001100000000000000000000001000000]")));
		assertEquals(456, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111110100000111010100011111111111111110000011101111010110000100000001000000111111111111111111111111000001001110000000000000001000000000000000000000000]")));
		assertEquals(454, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000011111000000111110111111111111111111111111000100111010000011011111111111110000011111111010110001000001001000000111111111111111111111110000000001111000000000001001000000000001100000000000]")));
		assertEquals(452, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111100000111010000111011111111111110000011111111110110001001000000000000111111111111111111111100000000001111000000000001000000000000001100001001000]")));
		assertEquals(452, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000011111000000111110011111111111111111111111100000111011100011011111111111110010111111111110000000001001001000000111110111111111111111110000000001111000000000000001100000000000000001101000]")));
		assertEquals(450, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000111111000000111110011111111111111111111111100000111011100011011111111111111001111111111110110001001001001000000111111111111111111111100000000001111000000000000000000000000001100000000000]")));
		assertEquals(457, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000011111000000111110011111111111111111011111101111111010000011011111111111110110011111111110010000001000000000000111111111111111111111110000000001111000000000000001000001000000000001001000]")));
		assertEquals(460, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111100000111010100011011111111111110000111110111010110001101001001000000111111111111111111111111000000001111000000000000000000000001000000001000000]")));
		assertEquals(453, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111011111000000111110011111111111111111111111100000111010000011011111111111110000011111011110110000001000001100000111111111111111111111110000000001110000000000000001000001000000000000000000]")));
		assertEquals(459, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000011111000000111110011111111111111111111111101001111010010011011111111111110000111010110110100000001000001000000111111111111111111111110000000001100000000001100000001000000000000001101000]")));
		assertEquals(455, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111101010000111110011111111111111111111111100000111010000111111111111111110000011111111010110001001001001000000111111111111111111111010000000001111000000000000000001100000000000001001000]")));
		assertEquals(457, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[00100000000000111101000000111111111111111111111111111111100100111010010011011111111111111000011111110110110001001001001000000111111111111111111111110000000000100000000001000000001001100000000000000000]")));
		assertEquals(450, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000110111000000111110011111111111111111111111100011111010001011111111111111110010011111111110110001101000001000000111111011111111111111100000000000100000000001000000000001100000000001001000]")));
		assertEquals(458, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111100000111010100011011111111111110000011101111100110001001000101000000111111111111111111111110000000001111000001000000000000000001000000001001000]")));
		assertEquals(462, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000000111111000000110110011111111111111111111111100000110010000111011111111111110000011111111010110001001001001000000111111111111111111111110001000001111000000000000001001000000000001001001000]")));
		assertEquals(454, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111100100111010011011111111111111111000011101111010110000001000000000000111111111111111111111110000000001111000000000000001100000001000001000000000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized50p()
	{
		assertEquals(576, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111011111000000111111111111111111111111111111100001111010000011111111111111110000011110111110110000101001110000000111111111111111111111111101000001111000001001100000001000000001100001001000]")));
		assertEquals(569, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101010000000111111010000111110011111111111111111111111110011111010100011011111111111110100011111111110110001001001111000000111111111111111111111110001100001111000000001100000001000000000001101101000]")));
		assertEquals(574, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10000000000111111111000000111110111111111111111111111111101001111010101011111111111111110010011101111110110001100001001110000111111111111111111111111000000001111000000000000001110001001001110001001000]")));
		assertEquals(575, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111111000000111111111111111111111111111111110000111010110011111111111111110010011111111110110001001101001000000111111111111111111111110000001101111000001100000000001001001001000001111000]")));
		assertEquals(573, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111101000000111110111111111111111111111111101001111011000011011111111111110001111111111110110000001001001000000111111111111111111111110000001101111000000001100001000000001110001001111010]")));
		assertEquals(573, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111000000111111111111111111111111111111100100111010100011011111111111110001111111111010100001001101001000000111111111111111111111110000000001111000001100001000001101001100000001001000]")));
		assertEquals(574, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111111010010111111111111111111111111111111100000111010011111111111111111110100011111111110110000001001000000000111111111111111111111111101000001111000001000001000000001111000000001101000]")));
		assertEquals(571, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110111111111111111111111111101111111010000011011111111111110000011111111110110001101000001000000111111111111111111111110000000101111000000001101000001001100000001001101100]")));
		assertEquals(575, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111110011111111111111111111111110000111011100011111111111111110011111111111110110000001001111000000111111111111111111111111001001001111000000000000000001101111001100001001000]")));
		assertEquals(570, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111100011111011010011011111111111110010011111111110100000001100001000000111111111111111111111110000001101111000001101000000001101100000001001110000]")));
		assertEquals(565, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111110100111010001011011111111111110000011111111110110000001001101000000111111111111111111111110000000001111000001101110001000000001110001101101000]")));
		assertEquals(573, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111111111111111111111111111110111011111011101111011111111111111111111111111110110000001001111000000111111111111111111111110000000001111000001000001101000000000000001101001000]")));
		assertEquals(573, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111100011111010110011011111111111111101111110111010110001001001101000000111111111111111111111110000000001111000001001110001001000000001100001101000]")));
		assertEquals(570, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111100000111110011111111111111111111111100100111010011011111111111111110101111111111110100001001001001000000111111111111111111111110000001101111000000000001100000001001101000001111000]")));
		assertEquals(569, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111100000111011100111011111111111110011111111111010110000001001001000000111111111111111111111110000001101110000001100001001100001100000001111001000]")));
		assertEquals(569, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110111111111111111111111111100100111010001011011111111111111001111111110110110001101001110000000111111111111111111111110000001001111000000001110000000000001110001001101000]")));
		assertEquals(575, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111111000000111111111111111111111111111111100011111011010011111111111111110000011111111110110000001000001100000111111111111111111111110000001101111000001100001101101001000000000001001000]")));
		assertEquals(572, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111000000111110111111111111111111111111101000111010100111011111111111110000011110111110110000001001001000000111111111111111111111110001001101111000000001100000001101000001000001101010]")));
		assertEquals(573, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111010000111110011111111111111111111111100000111010001111011111111111111001111011111110110001101001001000000111111011111111111111110000000001111000001101001100000001101000001001111000]")));
		assertEquals(570, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111100000111010000111111111111111110110011111111100110000100001001110000111111111111111111111110001101101111000001000001000001111100000000001001000]")));
		assertEquals(569, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111111111111111111111111111111100000111010100111111111111111110001111111111110110000001001001000000111111111111111111111110000001111111000000000000001111111100001000001001000]")));
		assertEquals(577, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111111000000111111111111111111111111111111110001111010001011111111111111110011111111111110110000001000001000000111111111111111111111110001001001111000001000000000001000000001101111101000]")));
		assertEquals(569, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111000000111110011111111111111111111111100000111010000111011111111111110010011111111111110001001001001100110111111111111111111111110000000001111000001101100000001100001100000001100000]")));
		assertEquals(575, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111111000000111111111111111111111111111111101111111010000111011111111111111110011111111011110000100001001111000111111111111111111111110000001001111000001100000000000000001000001001101000]")));
		assertEquals(579, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01100000000000111111101000111111111111111111111111111111111000111010000111011111111111110000111111111110110001101001001000000111111111111111111111110000000001111000000001001001001000001101110001001000]")));
		assertEquals(575, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111111100000111110011111111111111111111111101011111010100011011111111111111001111111111010110000001001001000000111111111111111111111111001100001111000000000000001001001000001100001101000]")));
		assertEquals(571, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111000000111110111111111111111111111111100111111010101011011111111111110011111111111010110000101000001100000111111111111111111111110000000001111000000000001100000000001001001011101000]")));
		assertEquals(573, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000000111111000000111111111111111111111111011111100111111111010111111111111111110110011111111110110000001100101000000111111111111111111111110000000001111000001110000001000001001100000001101000]")));
		assertEquals(569, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000000111111000000111111111111111111111111111111100111111110010011111111111111111000011111111110110000001000001000000111111111111111111111110001000001111000000001100000000001001101101001100000]")));
		assertEquals(575, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100000000111111110000000111111111111111111111111111111100000111010001011011111111111110100011111111010110000001001101100000111111111111111111111111000000001111000000000000000001001111100001101101000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized60p()
	{
		assertEquals(680, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111000000111111111111111111111111111111100001111110001011011111111111111101111111111110110001101111110000000111111111111111111111110001001101111000001111110001001101100000000001111000]")));
		assertEquals(688, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100111110111111111000000111111111111111111111111111111100111111110001111011111111111110010011111111110110000001001101000110111111111111111111111110000001001111000001100001100001001001101101001100000]")));
		assertEquals(688, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111010000111111111111111111111111111111111011111010010011111111111111111011111111111110110001001000001110000111111111111111111111111111000001111000001110001001101001101110000001101000]")));
		assertEquals(684, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101010000111111111000000111111111111111111111111111111101011111010000111011111111111110011111111111110110000001111100000000111111111111111111111110001100001111000000000000001101101001101101111111000]")));
		assertEquals(685, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111110011111111111000000111110111111111111111111111111101000111011111011111111111111110001111111111110110001001001101100000111111111111111111111110000001111111000000001000001111100001000001101111000]")));
		assertEquals(688, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101111111111011111000000111110111111111111111111111111111010111011000011011111111111111010011111111110110000001001101110000111111111111111111111111000001101111000000001101000000001101001111101001000]")));
		assertEquals(687, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101101111111111111000000111110011111111111111111111111100001111011000011111111111111111001111111111110110000101101110000000111111111111111111111110001001101111000001100001111000001101101000001101000]")));
		assertEquals(685, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111010010111110111111111111111111111111100011111010010011111111111111110001111111111110110000001101001110111111111111111111111111111000001101111000001110001001000001110001100001101000]")));
		assertEquals(690, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101111111000111111000000111111111111111111111111111111100011111010000011011111111111110101111111111010110000001001101000000111111111111111111111111001001101111000000001011110001000001001111101101000]")));
		assertEquals(687, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101010000111111111110000111111111111111111111111111111111000111010110011011111111111111000011111111110110000000101001110000111111111111111111111110001110001111000000001101101110001101101000001101000]")));
		assertEquals(680, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111000111111000000111110111111111111111111111111110000111010110011111111111111111001111111111110110000001001110000110111111111111111111111110001000001111000001111000000001101101100001101101000]")));
		assertEquals(682, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111000001111111111111111111111111111111101111111010101111011111111111111111111111111100110000101001000110000111111111111111111111110000001111111000001000001101100000001101111101101000]")));
		assertEquals(684, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111111011111111111000000111110111111111111111111111111100000111011100011111111111111111011111111111111110001001111000110000111111111111111111111110001110001111000000000000001101001101001000001101000]")));
		assertEquals(684, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111010011111111111111111111111111111111100011111011011011111111111111110110111111111110110001001001001100000111111111111111111111111100000001111000001111001101100000001101100001111000]")));
		assertEquals(686, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111000000111111111111111111111111111111111011111010010111011111111111110001111111111110110001001001101111000111111111111111111111111101000001111000000001101101000001101101100001111000]")));
		assertEquals(683, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101010000111111111010011111110011111111111111111111111100111111010001011111111111111111101111111111110110000101000001110000111111111111111111111111101000001111000000001100001101111000001101111001000]")));
		assertEquals(685, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111000000111111111111111111111111111111100011111010001011011111111111110100111111111110110000000111101110110111111111111111111111111110001001111000000000001111100001101100000001101100]")));
		assertEquals(692, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100011111111011111010001111111111111111111111111111111100011111010100011111111111111110000011111111110110000001001001100000111111111111111111111110001001101111000001101001000001000001111101001101000]")));
		assertEquals(687, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111010011111111111111111111111111111111110011111010011011111111111111110111111111110110110000001001000100000111111111111111111111110001001101111000000001111001100001101100001001101010]")));
		assertEquals(692, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111110101000111111010000111111111111111111111111111111100011111010000011011111111111110000111111111110110001001100101000000111111111111111111111111101100001111000000001111001100001100001101001101000]")));
		assertEquals(690, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10100111011000111111000000111111111111111111111111111111100111111011010111011111111111111001111111111110110001001101111100000111111111111111111111111100001001111000001111101100000001100001000001001000]")));
		assertEquals(686, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111000111111010000111110111111111111111111111111101011111010001011011111111111110000011110111110110000001101001000000111111111111111111111110001101101111000001000001100001101101001101101101000]")));
		assertEquals(682, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101010000111111111000000111110011111111111111111111111100011111011100011111111111111111110011110111110110000101111001110110111111111111111111111111100001001111000001100000001001110001110001101101100]")));
		assertEquals(692, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101010000111111111010000111111111111111111111111111111110011111010110111011111111111110101111111111110110000101001101000000111111111111111111111101001001101111000000001101101001101101100000001001000]")));
		assertEquals(688, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100111111111111111000000111110111111111111111111111111101111111011000011011111111111110011111111111110110001001100000000000111111111111111111111110001000001111000001111110001001101000001101001101000]")));
		assertEquals(686, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101101001111111111000000111110111111111111111111111111101111111010100011011111111111110101111111111111010000101001101110000111111111111111111111110000000001111000001001101101001110000000001111101000]")));
		assertEquals(702, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111101111111111000000111110111111111111111111111111100100111011101111011111111111110000111111111111110000001001101100000111111111111111111111110000001001111000001001000001101001001001101001101010]")));
		assertEquals(688, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111000111111100000111110111111111111111111111111110011111011110111011111111111110001111111111110110000101001101000000111111111111111111111111100000001111000000001101100001001000001110001101010]")));
		assertEquals(688, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11000000000111111111010010111111111111111111111111111111100011111010100011011111111111110111111111111110110001101100001110000111111111111111111111110001100001111000001101000001001001101111100001111000]")));
		assertEquals(682, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11100000000111111111010011111110111111111111111111111111110011111010001111111111111111111011111111111110110001101111100000100111111111111111111111110000000001111000000001000001101101100001101101101100]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized70p()
	{
		assertEquals(804, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111101000111011011011011111111111110011111111111111110001001101111110000111111111111111111111111100000001111000001001001111110001001111001111100000]")));
		assertEquals(800, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011111111111111010011111111111111111111111111111111101011111011101011011111111111110001111111111111110000001101101000110111111111111111111111110001110001111000001101110000001101100001111111101010]")));
		assertEquals(801, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11110111111111111111010011111111111111111111111111111111100100111011010011011111111111110011111111111110010001001101111100110111111111111111111111111110000001111000001101001101101101110001001111101000]")));
		assertEquals(804, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111000000111111111111111111111111111111101101111010101111011111111111111011111111111110110000101001111111000111111111111111111111111101101101111000001101001001001101111101001001101000]")));
		assertEquals(793, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111101111111111010000111111111111111111111111111111101011111110100011011111111111110001111111111110110000101001110000000111111111111111111111110001101011111000001101111100001111101101111101110000]")));
		assertEquals(798, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111110111111111000000111111111111111111111111111111100011111010101011111111111111110001111111111110110000001110101111100111111111111111111111110000000001111000001101101101101111001111101101111000]")));
		assertEquals(796, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111000000111111111111111111111111111111110011111010000011111111111111110011111111111111110000101110111000000111111111111111111111110001111101111000001101001100001101101101101101110000]")));
		assertEquals(791, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011111111111111000000111111111111111111111111111111110011111110111011011111111111111001111111111110110000001110111000000111111111111111111111111100001101111000001111111101101100000001111111101100]")));
		assertEquals(799, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011111111111111010011111111111111111111111111111111100011111010100111111111111111110001111111111110110001001001001000111111111111111111111111110001111101111000001111001000001101001111101111111000]")));
		assertEquals(803, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10111111111111111111010011111111111111111111111111111111100011111010101111011111111111111111111111111110110001101001101100111111111111111111111111110000001110111000001001100001101111101111001101000000]")));
		assertEquals(801, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01101111111111111111010011111111111111111111111111111111110011111010010011011111111111110011111111111110110000001101101110000111111111111111111111111101101101111000001101101001111110000001001101101000]")));
		assertEquals(799, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111011111111111000000111111111111111111111111111111101011111111100011111111111111110101111111111110110000101101101000000111111111111111111111101101101101111000001101110001101111101111001001111000]")));
		assertEquals(797, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101111011111111111010011111110011111111111111111111111100011111010010111011111111111110001111111111110110010101111101110100111111111111111111111111001111101111000001100001101110000001101111101111000]")));
		assertEquals(795, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111010000111111111111111111111111111111100011111111010011011111111111110111111111111110110000101001001110000111111111111111111111111111101111111000001111001110000000001101111111101000]")));
		assertEquals(798, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011111111011111010011111111111111111111111111111111100011111011100111111111111111110001111111111110110000001111111000000111111111111111111111111101001001111000001101001001101101101110001101111000]")));
		assertEquals(800, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111011111111111100000111111111111111111111111111111100011111110000111111111111111110001111111111110110000101111101100000111111111111111111111111000001101111000001001110001111110001111101101111000]")));
		assertEquals(803, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111000000111111111111111111111111111111100011111111010011011111111111111001111111111110110001001111111110000111111111111111111111111111110001111000001001101001001011001000001001101110]")));
		assertEquals(797, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101011011111111111010011111111111111111111111111111111101011111011010011111111111111111001111111111110110000101001001110000111111111111111111111111101101111111000001101001110001001111100001111111000]")));
		assertEquals(799, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011111111111111000000111111111111111111111111111111100011111110001011011111111111111010111111111110110001001111101110000111111111111111111111111100001101111000001101101001101101001101101101101000]")));
		assertEquals(795, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111101111111111111000000111111111111111111111111111111110100111111101011111111111111110011111111111110110000101111100110110111111111111111111111110001100001111000000001101101101101101101110001101010]")));
		assertEquals(795, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111010111111111111000000111111111111111111111111111111100011111011011111011111111111111101111111111110110001001111111000000111111111111111111111111001101101111000001100001100001101101111101111101100]")));
		assertEquals(802, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111110111111111111010010111111111111111111111111111111100011111011101111111111111111110001111111111110110001101111001100100111111111111111111111110001101001111000001111111001100001000001111101111000]")));
		assertEquals(793, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101010000111111111010011111111111111111111111111111111100111111110000111111111111111110111111111111110110000101001100111110111111111111111111111111000001111111000001101100001100001101101111101111100]")));
		assertEquals(803, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111011111111111111000000111111111111111111111111111111100011111010011011011111111111110001111111111110110101001101111110110111111111111111111111110001000001111000001110001101101001001111110001111110]")));
		assertEquals(798, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111000000111111111111111111111111111111100111111010010011011111111111111101111111111110110000001101101100000111111111111111111111111110001101111000001101100000001111111111111101101000]")));
		assertEquals(807, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111011111111111010000111111111111111111111111111111100011111010100011011111111111110111111111111110110000101111101100000111111111111111111111111101001001111000001101001111101100001101001101111100]")));
		assertEquals(807, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111111111111111010011111111111111111111111111111111110100111011011011111111111111111001111111111110110000001111111100000111111111111111111111110001101001111000000001101101101001001001001101111110]")));
		assertEquals(796, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111011111000000111111111111111111111111111111100011111010000111111111111111110101111111111110110000001001001110000111111111111111111111111001101111111000001001111101101101101101101111101000]")));
		assertEquals(799, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111010010111111111111111111111111111111100111111011100011011111111111110111111111111110110000001101001110000111111111111111111111110001111101111000000001101111001111001101101101101000]")));
		assertEquals(797, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101110111111111111111000111111111111111111111111111111111000111011100111011111111111111011111111111110110001001111111000100111111111111111111111110000001101111000000001101111111100001111101101101000]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized80p()
	{
		assertEquals(910, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111111101111111111111111111111111111111110111111011000011011111111111111001111111111110110001001001101111000111111111111111111111111111111111111000001111101111111001111101111111111000]")));
		assertEquals(910, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111110010111111111111111111111111111111111011111011001011111111111111111111111111111110110000101101111110000111111111111111111111111101101111111000001111101101111101111101111101101100]")));
		assertEquals(910, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111110000011011111111111110011111111111110110000101111001111110111111111111111111111111001101101111000001110001101001111111111111101101110]")));
		assertEquals(914, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111110011111111111111111111111111111111101011111010110011011111111111111001111111111110110001101101111111110111111111111111111111111101111101111000001101101101111001111001101111101100]")));
		assertEquals(910, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111111110111111111111111111111111111111100111111010001111011111111111111001111111111110110101001111111110100111111111111111111111111101001111111000001101101101101111101101111101101100]")));
		assertEquals(911, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111111111111111111111111111111111111111100011111011001011011111111111110101111111111111110011101111111100100111111111111111111111110001101101111000001111101101111101101101101111111000]")));
		assertEquals(908, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111101111111110100011011111111111111001111111111110110011001111100110110111111111111111111111111111001101111000001101101101101111111101101111101100]")));
		assertEquals(910, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111011111111111111111111111111111111111111111111111111111111010001011011111111111110001111111111110110100101101101110110111111111111111111111111111101101111000001101111101101101111101111101101000]")));
		assertEquals(912, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111110111111011110111011111111111110111111111111110110001001111111100100111111111111111111111111101101101111000001111101101001101101111111111111100]")));
		assertEquals(912, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111101011111011100111111111111111110001111111111110110110001101101110110111111111111111111111111001111011111000001111101101101101101101111111111100]")));
		assertEquals(907, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111010000011011111111111111001111111111110110001101111111110000111111111111111111111111101001101111000001111101111101111111101101101101100]")));
		assertEquals(912, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111011111111111111111111111111111111100111111011010011111111111111110001111111111110110101001111101110100111111111111111111111111110001111111000001101111101101111001111101111111000]")));
		assertEquals(907, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111111011111110111111111111111111111111100011111010000111011111111111111101111111111110110001101111111100100111111111111111111111111100001111111111001111101101111111101111101101111000]")));
		assertEquals(909, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111110011111111111111111111111111111111110011111110111011011111111111110001111111111110110011101111111110111111111111111111111111111001100001111000001001111111101101101101111101111000]")));
		assertEquals(909, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111110011111111111111111111111111111111110011111010010011011111111111111011111111111111110000001111001110110111111111111111111111111111001101111000001111101101111111111101101101101000]")));
		assertEquals(908, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111101011111111111111111111111111111111111111111100011111011010011111111111111110011111111111110110000001111101110111111111111111111111111110001111101111000001111111101101101101111101101101100]")));
		assertEquals(910, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111011111111111111101111111111111111111111111111111101111111110000011011111111111110001111111111110110010101101111110111111111111111111111111111101101001111000001111101111111111001101101101101100]")));
		assertEquals(912, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111110011111111111111111111111111111111110111111111000011011111111111110001111111111111110000001111111111111111111111111111111111111101101001111000001111111100001001101101111101111000]")));
		assertEquals(912, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111110011111111110111111111111111110111111111111110110001001101111110100111111111111111111111111111101111111000001101101101101111001101101101101010]")));
		assertEquals(910, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111100000111111111111111111111111111111110011111110101011011111111111110011111111111110110001101101111111110111111111111111111111111101111101111000001111101001111111111111110001111100]")));
		assertEquals(909, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111010010011011111111111110000111111111110110011101111111110110111111111111111111111111111001111111000001101101100001101101111101101111100]")));
		assertEquals(914, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111110111111111111110011111111111111111111111111111111110111111010000011111111111111111001111111111110110100001111101111100111111111111111111111111101101111111000001101111111111101101001101111111000]")));
		assertEquals(909, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111110011111111111111111111111111111111100111111010000011011111111111111111111111111110110010001101111110111111111111111111111111111111111111111000001100001101101101111101101101101100]")));
		assertEquals(907, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111100111111011000011011111111111110101111111111110110111101111101110110111111111111111111111110001101111111000001111111101101111101111101101101100]")));
		assertEquals(908, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111010011111111111111111111111111111111111011111010010011011111111111110011111111111101110000101101111110110111111111111111111111111111101111111000001011101111101101111101101101111000]")));
		assertEquals(906, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111110100011111111111111110001111111111110110000001101001110110111111111111111111111111101101101111000001101111101101101101111101111101100]")));
		assertEquals(909, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111010011111111111111111111111111111111110011111010110011111111111111110111111111111110110100001111111110110111111111111111111111111101101001111000001101111101101101001101111111111100]")));
		assertEquals(910, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111101111111111111111111111111111111111111111111111110111111110000011011111111111111001111111111110110011101101111110100111111111111111111111111001111101111000001101101101101101101111111101111000]")));
		assertEquals(904, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[10101111111111111111111110111111111111111111111111111111101011111110110111111111111111110101111111111110110101101111110110111111111111111111111111111101111101111000001110001101101101101101101101101000]")));
		assertEquals(910, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111110111111111111111111111111111111111100011111011000111011111111111110001111111111110110000001101101110110111111111111111111111111101101111111000001101101111101101111101111111100100]")));
	}

	@Test
	public void testSolutionsFromDissertationOptimized90p()
	{
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111111010111011111111111111011111111111111110011101111111111111111111111111111111111111101101111111000001101101111111111111111101111111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111111100011111111111111110111111111111110110010001111111111111111111111111111111111111111111101111000001111111111111101111111111111111110]")));
		assertEquals(1017, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111111101011011111111111111011111111111110110111001111111111111111111111111111111111111111111101111111001111111101101111111111111101111100]")));
		assertEquals(1021, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110111111111111111011111111111110111111111111110110111001101110111110111111111111111111111111101111101111011001111101111111111111101111111111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110111111110001011111111111111110011111111111110110011101111111111110111111111111111111111111111111111111000001111111111111111111111111111101110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111111111110001011011111111111110111111111111110110101101111111111111111111111111111111111111101101111111011001111111111111101101111111101111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111110101111011111111111111011111111111111110011101111111110110111111111111111111111111111111111111000001111101101101111111101111111111111]")));
		assertEquals(1021, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111010001111011111111111111001111111111111110101001111111110111111111111111111111111111101111111111001001111111111111111111111111111111100]")));
		assertEquals(1021, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11101111111111111111111111111111111111111111111111111111111111111111110011111111111111110011111111111111110110001111111111111111111111111111111111111111111101111000001111101101111111111111111111101110]")));
		assertEquals(1025, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111011001111111111111111110001111111111111110111101101111111111111111111111111111111111111111101111101001111101111101111111101111111111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110111111110111111011111111111110011111111111111111001000111111110111111111111111111111111111111111111111000001111101111101111111101111111111110]")));
		assertEquals(1017, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111110001111111111111111111111111111111110110111101111111111111111111111111111111111111111110001111000001111111101111111111111101111111111]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111111001011011111111111110111111111111110110101101111111111111111111111111111111111111111111111111000001111111101111101111111111111111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111110111111011111111111111011111111111111110111001111111110111111111111111111111111111111111111111000001111111101111111101101111111111100]")));
		assertEquals(1018, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111111111110011111011111111111110011111111111111110011101111111111111111111111111111111111111101111111111001001111111111111101111101101101111100]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100111111110110111111111111111110111111111111111110111101111111110111111111111111111111111111111111111111000001111101111101111111101111111111100]")));
		assertEquals(1022, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111111111111111111111111110111111111111111110010101111101110111111111111111111111111111101111101111000001111111101111111111111111111111110]")));
		assertEquals(1025, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100111111111111011011111111111111111111111111111110101001101111111111111111111111111111111111111111111111000001111111111101111111001111111111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111011111111100111011111111111110001111111111111110011101111111111110111111111111111111111111111111101111000001101111101111111101111111111111111]")));
		assertEquals(1017, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111111111111110111111111111111111110101111111111110110101001111111111110111111111111111111111111111111101111111001111101111101111111101101111101011]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111110101111111111111111110011111111111110110010101111111111111111111111111111111111111111111111111000001111111111101111111101111111111110]")));
		assertEquals(1017, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110111111111010011011111111111111101111111111111111001101111111111111111111111111111111111111100001111111000001111111111111111111111111111111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111110001111111111111111111111111111111110110101101111111110110111111111111111111111111111111111111000001111111111111111111101111111111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111111010111111111111111110011111111111111111011001111111111111111111111111111111111111111101101111000001111101111111111111101101111111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[01111111111111111111111111111111111111111111111111111111110111111111101111111111111111111011111111111111110111001111111111111111111111111111111111111111111111111000001111101111111101101111111101111100]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111110111111111111111111111101111111111111110101001111111111110111111111111111111111111101111101111000001101111111111111111111111101111011]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111100011111111010111111111111111111001111111111110110101001111111111111111111111111111111111111111101101111011001101111111101111111111111111111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111110011111111110011011111111111111001111111111111110111101111111111110111111111111111111111111101101111111000001111101111111111101111111111111110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101011111110110111011111111111111101111111111111111101001111111111110111111111111111111111111111111101111000001111111101111111111111101111101110]")));
		assertEquals(1019, optimizedCalculator.calculateCost(FunctionPointsCalculator.fromString("[11111111111111111111111111111111111111111111111111111111101111111111010011011111111111111111111111111111110010001111111111111111111111111111111111111111111101111000001111111101111111101111101111111011]")));
	}
}